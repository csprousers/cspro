#include "StdAfx.h"

namespace CaseTreeIcons
{
    static int Icons[] =
    {
        IDI_NON_SELECTED_FIELD_ICON_3D,
        IDI_SELECTED_FIELD_ICON_3D,

        IDI_NON_SELECTED_ROSTER_ICON,
        IDI_SELECTED_ROSTER_ICON,

        IDI_NON_SELECTED_LEVEL_ICON_3D,
        IDI_SELECTED_LEVEL_ICON_3D,

        IDI_NON_SELECTED_OCCURRENCE_ICON,
        IDI_SELECTED_OCCURRENCE_ICON,

        IDI_NON_SELECTED_GROUP_ICON_3D,
        IDI_SELECTED_GROUP_ICON_3D,

        IDI_NON_SELECTED_OCCURRENCE_TITTLE_ICON_3D,
        IDI_SELECTED_OCCURRENCE_TITTLE_ICON_3D,

        IDI_NON_SELECTED_PROTECTED_ICON_3D,
        IDI_SELECTED_PROTECTED_ICON_3D,

        IDI_NON_SELECTED_FIELD_ICON_3D_0, // Blanco
        IDI_SELECTED_FIELD_ICON_3D_0,

        IDI_NON_SELECTED_FIELD_ICON_3D_1, // Amarillo
        IDI_SELECTED_FIELD_ICON_3D_1,

        IDI_NON_SELECTED_FIELD_ICON_3D_2, // Verde
        IDI_SELECTED_FIELD_ICON_3D_2,

        IDI_NON_SELECTED_FIELD_ICON_3D_3, // Gris
        IDI_SELECTED_FIELD_ICON_3D_3,

        IDI_NON_SELECTED_FINISHED_CASE_ICON_3D,
        IDI_SELECTED_FINISHED_CASE_ICON_3D,

        IDI_NON_SELECTED_NOT_FINISHED_CASE_ICON_3D,
        IDI_SELECTED_NOT_FINISHED_CASE_ICON_3D,

        IDI_NON_SELECTED_NOT_ALL_FINISHED_CASE_LIST_TITTLE_ICON_3D,
        IDI_SELECTED_NOT_ALL_FINISHED_CASE_LIST_TITTLE_ICON_3D,

        IDI_NON_SELECTED_ALL_FINISHED_CASE_LIST_TITTLE_ICON_3D,
        IDI_SELECTED_ALL_FINISHED_CASE_LIST_TITTLE_ICON_3D,

        IDI_NON_SELECTED_EMPTY_ROSTER,
        IDI_SELECTED_EMPTY_ROSTER,

        IDI_NON_SELECTED_NON_EMPTY_ROSTER,
        IDI_SELECTED_NON_EMPTY_ROSTER,

        IDI_NON_SELECTED_FIELD_NOTE_ICON_3D,
        IDI_SELECTED_FIELD_NOTE_ICON_3D,

        IDI_NON_SELECTED_FIELD_NOTE_ICON_3D_0, // Blanco
        IDI_SELECTED_FIELD_NOTE_ICON_3D_0,

        IDI_NON_SELECTED_FIELD_NOTE_ICON_3D_1, // Amarillo
        IDI_SELECTED_FIELD_NOTE_ICON_3D_1,

        IDI_NON_SELECTED_FIELD_NOTE_ICON_3D_2, // Verde
        IDI_SELECTED_FIELD_NOTE_ICON_3D_2,

        IDI_NON_SELECTED_FIELD_NOTE_ICON_3D_3, // Gris
        IDI_SELECTED_FIELD_NOTE_ICON_3D_3,

        IDI_NON_SELECTED_ROSTER_NOTE_ICON,
        IDI_SELECTED_ROSTER_NOTE_ICON,

        IDI_NON_SELECTED_LEVEL_NOTE_ICON_3D,
        IDI_SELECTED_LEVEL_NOTE_ICON_3D,

        IDI_NON_SELECTED_GROUP_NOTE_ICON_3D,
        IDI_SELECTED_GROUP_NOTE_ICON_3D,

        IDI_NON_SELECTED_OCCURRENCE_TITTLE_NOTE_ICON_3D,
        IDI_SELECTED_OCCURRENCE_TITTLE_NOTE_ICON_3D,

        IDI_NON_SELECTED_FINISHED_CASE_NOTE_ICON_3D,
        IDI_SELECTED_FINISHED_CASE_NOTE_ICON_3D,

        IDI_NON_SELECTED_NOT_FINISHED_CASE_NOTE_ICON_3D,
        IDI_SELECTED_NOT_FINISHED_CASE_NOTE_ICON_3D,

        IDI_NON_SELECTED_NOT_ALL_FINISHED_CASE_LIST_TITTLE_NOTE_ICON_3D,
        IDI_SELECTED_NOT_ALL_FINISHED_CASE_LIST_TITTLE_NOTE_ICON_3D,

        IDI_NON_SELECTED_ALL_FINISHED_CASE_LIST_TITTLE_NOTE_ICON_3D,
        IDI_SELECTED_ALL_FINISHED_CASE_LIST_TITTLE_NOTE_ICON_3D,

        IDI_NON_SELECTED_EMPTY_ROSTER_NOTE,
        IDI_SELECTED_EMPTY_ROSTER_NOTE,

        IDI_NON_SELECTED_NON_EMPTY_ROSTER_NOTE,
        IDI_SELECTED_NON_EMPTY_ROSTER_NOTE,

        IDI_WRITED_NODE_ICON,
        IDI_WRITED_NODE_ICON,

        IDI_NON_WRITED_CLOSE_ICON,
        IDI_NON_WRITED_CLOSE_ICON,

        IDI_GREEN_NODE_ICON,
        IDI_GREEN_NODE_ICON,

        IDI_BLUE_NODE_ICON,
        IDI_BLUE_NODE_ICON,

        IDI_GREEN_NODE_PADLOCK_ICON,
        IDI_GREEN_NODE_PADLOCK_ICON,

        IDI_GREEN_NODE_NOTE_ICON,
        IDI_GREEN_NODE_NOTE_ICON,

        IDI_BLUE_NODE_NOTE_ICON,
        IDI_BLUE_NODE_NOTE_ICON,

        IDI_GREEN_NODE_PADLOCK_NOTE_ICON,
        IDI_GREEN_NODE_PADLOCK_NOTE_ICON,
    };

    int GetIconIndex(int id)
    {
        static std::map<int, int> IconIndexMap;

        if( IconIndexMap.empty() )
        {
            for( size_t i = 0; i < _countof(Icons); ++i )
                IconIndexMap.try_emplace(Icons[i], i);
        }

        ASSERT(IconIndexMap.find(id) != IconIndexMap.cend());
        return IconIndexMap.at(id);
    }

    void ForeachIcon(const std::function<void(int)>& function)
    {
        for( size_t i = 0; i < _countof(Icons); ++i )
            function(Icons[i]);
    }

    size_t GetNumberIcons()
    {
        return _countof(Icons);
    }
}
