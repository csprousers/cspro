<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CommandLineRequiresSpec" xml:space="preserve">
    <value>You must save a specification in order to run this tool from the command line.</value>
  </data>
  <data name="ConfirmCancelTask" xml:space="preserve">
    <value>Are you sure that you would like to cancel the current operation?</value>
  </data>
  <data name="ExcelGroupTitle" xml:space="preserve">
    <value>Excel File: {0}</value>
  </data>
  <data name="ExcelNoData" xml:space="preserve">
    <value>There was no data in the worksheet.</value>
  </data>
  <data name="ExcelIOError" xml:space="preserve">
    <value>There was an error interacting with Excel: {0}</value>
  </data>
  <data name="ExcelOpenFilter" xml:space="preserve">
    <value>Excel Worksheets (*.xlsx;*.xlsm;*.xlsb;*.xls)|*.xlsx;*.xlsm;*.xlsb;*.xls</value>
  </data>
  <data name="ExcelOpenTitle" xml:space="preserve">
    <value>Select Excel Workbook</value>
  </data>
  <data name="InvalidNameSuggestOther" xml:space="preserve">
    <value>The name '{0}' is invalid. Do you want to use the suggested alternative, '{1}'?</value>
  </data>
  <data name="StartingRowInvalid" xml:space="preserve">
    <value>The starting row is not a valid number.</value>
  </data>
  <data name="StartingRowOutOfRange" xml:space="preserve">
    <value>The starting row cannot be less than 1 or greater than {0}.</value>
  </data>
  <data name="TitleReadingWorksheet" xml:space="preserve">
    <value>Reading the Worksheet: {0}</value>
  </data>
  <data name="InvalidLength" xml:space="preserve">
    <value>The length '{0}' is invalid.</value>
  </data>
  <data name="InvalidLengthAlpha" xml:space="preserve">
    <value>An alpha item must have length between 1-{0}.</value>
  </data>
  <data name="InvalidLengthNumeric" xml:space="preserve">
    <value>A numeric item must have length between 1-{0}.</value>
  </data>
  <data name="InvalidLengthNumericDecimal" xml:space="preserve">
    <value>A numeric item's decimal length must be between 1-{0}.</value>
  </data>
  <data name="InvalidLengthZero" xml:space="preserve">
    <value>The length cannot be 0.</value>
  </data>
  <data name="InvalidName" xml:space="preserve">
    <value>The name '{0}' is invalid.</value>
  </data>
  <data name="InvalidNumberIds" xml:space="preserve">
    <value>A dictionary must have at least one ID item.</value>
  </data>
  <data name="DictionaryFileFilter" xml:space="preserve">
    <value>CSPro Dictionary (*.dcf)|*.dcf</value>
  </data>
  <data name="DictionarySaveTitle" xml:space="preserve">
    <value>Save CSPro dictionary</value>
  </data>
  <data name="AlreadyUsedName" xml:space="preserve">
    <value>The name {0} has already been used in this dictionary.</value>
  </data>
  <data name="InvalidIdNumericDecimal" xml:space="preserve">
    <value>A numeric item with a decimal component cannot be an ID item.</value>
  </data>
  <data name="ViewSourceCode" xml:space="preserve">
    <value>You can view the source code here: {0}</value>
  </data>
  <data name="DataFileFilter" xml:space="preserve">
    <value>CSPro DB Files (*.csdb)|*.csdb|Encrypted CSPro DB Files (*.csdbe)|*.csdbe|Text Data Files (*.dat)|*.dat|All Files (*.*)|*.*</value>
  </data>
  <data name="DataLabelFilter" xml:space="preserve">
    <value>Output data file: {0}</value>
  </data>
  <data name="DataSaveTitle" xml:space="preserve">
    <value>Save CSPro Data File</value>
  </data>
  <data name="DictionaryLabelFilter" xml:space="preserve">
    <value>{0}: {1}</value>
  </data>
  <data name="DictionaryOpenTitle" xml:space="preserve">
    <value>Select CSPro dictionary</value>
  </data>
  <data name="DictionaryUnsupportedNumberLevels" xml:space="preserve">
    <value>This tool only works with one-level dictionaries.</value>
  </data>
  <data name="ExcelLabelFilter" xml:space="preserve">
    <value>Excel file: {0}</value>
  </data>
  <data name="DictionaryReadError" xml:space="preserve">
    <value>There was an error reading the dictionary.</value>
  </data>
  <data name="DataWriteError" xml:space="preserve">
    <value>There was an error writing the data file.</value>
  </data>
  <data name="MappingUnassigned" xml:space="preserve">
    <value>&lt;unassigned&gt;</value>
  </data>
  <data name="MappingWorksheetAlreadyAssigned" xml:space="preserve">
    <value>The worksheet {0} is already assigned to a record.</value>
  </data>
  <data name="MappingItemOverlap" xml:space="preserve">
    <value>The item {0} cannot be assigned to as it is overlapped by the assigned item {1}.</value>
  </data>
  <data name="SpecFileFilter" xml:space="preserve">
    <value>Excel to CSPro Specification File (*.xl2cs)|*.xl2cs</value>
  </data>
  <data name="SpecFileOpenTitle" xml:space="preserve">
    <value>Select Excel to CSPro specification file</value>
  </data>
  <data name="SpecFileSaveTitle" xml:space="preserve">
    <value>Save Excel to CSPro specification file</value>
  </data>
  <data name="PrerunCheckInvalidStartingRow" xml:space="preserve">
    <value>The starting row is not valid. It must be a positive integer.</value>
  </data>
  <data name="PrerunCheckMappingIdsMustBeDefinedForEachRecord" xml:space="preserve">
    <value>The ID item {0} must be mapped for every mapped record.</value>
  </data>
  <data name="PrerunCheckMappingMustDefineRecord" xml:space="preserve">
    <value>You must map at least one record to a worksheet.</value>
  </data>
  <data name="PrerunCheckMappingNoIdsDefined" xml:space="preserve">
    <value>You must map at least one ID item to a column.</value>
  </data>
  <data name="PrerunCheckNoDataFile" xml:space="preserve">
    <value>You must specify a CSPro output data file.</value>
  </data>
  <data name="PrerunCheckNoDictionary" xml:space="preserve">
    <value>You must specify a CSPro dictionary.</value>
  </data>
  <data name="PrerunCheckNoExcel" xml:space="preserve">
    <value>You must specify an Excel workbook.</value>
  </data>
  <data name="TitleConvertingData" xml:space="preserve">
    <value>Converting from Excel to CSPro</value>
  </data>
  <data name="ConversionSuccess" xml:space="preserve">
    <value>{0} cases were converted.</value>
  </data>
  <data name="ConversionDuplicateKeys" xml:space="preserve">
    <value>{0} cases were converted but some portions of cases were not output because the Excel data was not in order. Sort your data and try the conversion again. The cases out of order include:</value>
  </data>
  <data name="ConversionSuccessDetailed" xml:space="preserve">
    <value>{0} cases were converted ({1} added, {2} modified, {3} skipped, and {4} deleted)</value>
  </data>
  <data name="ConvertDataPostDictionaryCreation" xml:space="preserve">
    <value>Do you now want to convert data with this dictionary?</value>
  </data>
</root>