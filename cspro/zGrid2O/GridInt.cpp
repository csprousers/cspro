// GridInt.cpp : grid interface stuff
//

#include "StdAfx.h"
#include "GridWnd.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[]= __FILE__;
#endif

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnKeyDown()
//
/////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnKeyDown(UINT* piKey, bool bProcessed)
{
    UNREFERENCED_PARAMETER(piKey);
    UNREFERENCED_PARAMETER(bProcessed);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSizeCol()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSizeCol(int iCol) const
{
    UNREFERENCED_PARAMETER(iCol);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSizeRow()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSizeRow(int iRow) const
{
    UNREFERENCED_PARAMETER(iRow);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSwapCol()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSwapCol(void) const
{
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSwapRow()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSwapRow(void) const
{
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanDeleteCol()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanDeleteCol(int iCol) const
{
    UNREFERENCED_PARAMETER(iCol);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanDeleteRow()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanDeleteRow(int iRow) const
{
    UNREFERENCED_PARAMETER(iRow);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectCol()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSelectCol(int iCol) const
{
    UNREFERENCED_PARAMETER(iCol);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectRow()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSelectRow(int iRow) const
{
    UNREFERENCED_PARAMETER(iRow);
    return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectCell()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSelectCell(int iRow, int iCol) const
{
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iCol);
    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectCell()
//
// return true if multiple selections of rows, columns, and cells are allowed
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanMultiSelect(void) const
{
    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectField()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSelectField(int iRow, int iCol, int iFld) const
{
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iCol);
    UNREFERENCED_PARAMETER(iFld);
    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectBox()
//
// base-class version prevents selection if the box is partially clipped by the cell boundaries
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSelectBox(int iRow, int iCol, int iBox) const
{
    const CGridCell& cell = GetCell(iRow, iCol);
    const CRect& rcCell = cell.GetRect();
    CRect rcBox = cell.GetBox(iBox).GetDims() + rcCell.TopLeft();
    CRect rcUnion;
    rcUnion.UnionRect(rcCell, rcBox);

    if (rcUnion!=rcCell)  {
        ASSERT(rcUnion.left == rcCell.left);
        ASSERT(rcUnion.top == rcCell.top);
        ASSERT(rcUnion.bottom>rcCell.bottom || rcUnion.right>rcCell.right);
        CString csMsg, csDirection;
        csDirection = (rcUnion.bottom>rcCell.bottom?_T("height"):_T("width"));
        csMsg.Format(_T("Can't select partially obscured boxes. You need to increase the %s of the cell so that the box is completely uncovered, then try again."), (LPCTSTR)csDirection);
        AfxMessageBox(csMsg,MB_ICONEXCLAMATION);
        return false;
    }

    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanDrawBox()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanDrawBox(int iRow, int iCol)
{
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iCol);
    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanSelectText()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanSelectText(int iRow, int iCol, int iTxt) const
{
    const CGridCell& cell = GetCell(iRow, iCol);
    const CRect& rcCell = cell.GetRect();
    CRect rcTxt = cell.GetText(iTxt).GetDims() + rcCell.TopLeft();
    CRect rcUnion;
    rcUnion.UnionRect(rcCell, rcTxt);
    if (rcUnion!=rcCell)  {
        ASSERT(rcUnion.left == rcCell.left);
        ASSERT(rcUnion.top == rcCell.top);
        ASSERT(rcUnion.bottom>rcCell.bottom || rcUnion.right>rcCell.right);
        CString csMsg, csDirection;
        csDirection = (rcUnion.bottom>rcCell.bottom?_T("height"):_T("width"));
        csMsg.Format(_T("Can't select partially obscured text objects. You need to increase the %s of the cell so that text object is completely uncovered, then try again."), (LPCTSTR)csDirection);
        AfxMessageBox(csMsg,MB_ICONEXCLAMATION);
        return false;
    }

    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCanDrawText()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ bool CGridWnd::OnCanDrawText(int iRow, int iCol)
{
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iCol);
    return true;
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCB_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCB_LClicked (const CPoint& pt)
{
    UNREFERENCED_PARAMETER(pt);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCB_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCB_RClicked (const CPoint& pt)
{
    UNREFERENCED_PARAMETER(pt);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnTH_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnTH_LClicked (int iCol)
{
    UNREFERENCED_PARAMETER(iCol);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnTH_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnTH_RClicked (int iCol)
{
    UNREFERENCED_PARAMETER(iCol);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnSH_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnSH_LClicked (int iRow)
{
    UNREFERENCED_PARAMETER(iRow);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnSH_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnSH_RClicked (int iRow)
{
    UNREFERENCED_PARAMETER(iRow);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCell_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCell_LClicked (const CPoint& ptCell)
{
    UNREFERENCED_PARAMETER(ptCell);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCell_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCell_RClicked (const CPoint& ptCell)
{
    UNREFERENCED_PARAMETER(ptCell);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCellField_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCellField_LClicked (CDEField* pFld, int iOcc)
{
    UNREFERENCED_PARAMETER(pFld);
    UNREFERENCED_PARAMETER(iOcc);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCellField_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCellField_RClicked (CDEField* pFld, int iOcc)
{
    UNREFERENCED_PARAMETER(pFld);
    UNREFERENCED_PARAMETER(iOcc);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCellText_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCellText_LClicked (CHitOb& hitOb)
{
    UNREFERENCED_PARAMETER(hitOb);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCellText_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCellText_RClicked (CHitOb& hitOb)
{
    UNREFERENCED_PARAMETER(hitOb);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCellBox_LClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCellBox_LClicked (CHitOb& hitOb)
{
    UNREFERENCED_PARAMETER(hitOb);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnCellBox_RClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCellBox_RClicked (CHitOb& hitOb)
{
    UNREFERENCED_PARAMETER(hitOb);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnLClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCell_LClicked    (int iRow, int iCol)
{
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iCol);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnRClicked()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnCell_RClicked (int iRow, int iCol)
{
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iCol);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnSwappedCol()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnSwappedCol(const std::vector<int>& fromIndices, int toIndex)
{
    UNREFERENCED_PARAMETER(fromIndices);
    UNREFERENCED_PARAMETER(toIndex);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnSwappedRow()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnSwappedRow(const std::vector<int>& fromIndices, int toIndex)
{
    UNREFERENCED_PARAMETER(fromIndices);
    UNREFERENCED_PARAMETER(toIndex);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnResizedCol()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnResizedCol(int iCol)
{
    UNREFERENCED_PARAMETER(iCol);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnResizedRow()
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnResizedRow(int iRow)
{
    UNREFERENCED_PARAMETER(iRow);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnAddBox()
//
// rc has cell top-left as origin
// bAddToAll==true means add to column, ==false means add as free text
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnAddBox(int /*iRow*/, int /*iCol*/, const CRect& /*rc*/)
{
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnAddText()
//
// pt has cell top-left as origin
// csTxt is the text to add
// bAddToAll==true means add to column, ==false means add as free text
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnAddText(int iCol, const CPoint& pt, const CString& csTxt, bool bAddToAll)
{
    UNREFERENCED_PARAMETER(iCol);
    UNREFERENCED_PARAMETER(pt);
    UNREFERENCED_PARAMETER(csTxt);
    UNREFERENCED_PARAMETER(bAddToAll);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnBoxMoved
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnBoxMoved(int iRow, int iCol, int iBox)
{
    UNREFERENCED_PARAMETER(iCol);
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iBox);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnTextMoved
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnTextMoved(int iRow, int iCol, int iTxt)
{
    UNREFERENCED_PARAMETER(iCol);
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iTxt);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
//
//                      CGridWnd::OnFieldMoved
//
///////////////////////////////////////////////////////////////////////////////////////////////////
/*V*/ void CGridWnd::OnFieldMoved(int iRow, int iCol, int iFld)
{
    UNREFERENCED_PARAMETER(iCol);
    UNREFERENCED_PARAMETER(iRow);
    UNREFERENCED_PARAMETER(iFld);
}
