using System;
using System.Drawing;
using System.Net;
using System.Windows.Forms;

namespace CSDeploy
{
    public partial class BarcodeDialog : Form
    {
        private string m_server;
        private string m_packageName;
        private CSPro.Util.QRCode m_qrCode;
        private Bitmap m_qrCodeBitmap;

        public BarcodeDialog(String server, String packageName)
        {
            m_server = server.Trim();
            m_packageName = packageName;

            InitializeComponent();
        }

        private void BarcodeDialog_Load(object sender, EventArgs e)
        {
            UpdateHyperlink();
            labelInstructions.Text = String.Format(Messages.QRCodeInstruction, m_packageName);

            if (m_server == "Dropbox")
            {
                checkBoxUsernamePassword.Enabled = false;
            }

            textBoxUsername.Enabled = false;
            textBoxPassword.Enabled = false;
        }

        private void UpdateHyperlink()
        {
            var encodedPackageName = WebUtility.UrlEncode(m_packageName);
            string hyperlink = $"https://www.csprousers.org/apps/add?server={m_server}&app={encodedPackageName}";

            if (checkBoxUsernamePassword.Checked && (!string.IsNullOrWhiteSpace(textBoxUsername.Text) || !string.IsNullOrWhiteSpace(textBoxPassword.Text)))
            {
                // the credentials are Base64-encoded
                var credentials = CSPro.Sync.BarcodeCredentialEncoder.GetCredentials(m_packageName, textBoxUsername.Text, textBoxPassword.Text);
                credentials = WebUtility.UrlEncode(credentials);
                hyperlink += $"&cred={credentials}";
            }

            textBoxHyperlink.Text = hyperlink;

            pictureBoxQRCode.Image = CreateQRCode(hyperlink);
        }

        private Bitmap CreateQRCode(string hyperlink)
        {
            Uri generator = new Uri(hyperlink);
            string payload = generator.ToString();
            
            try
            {
                // the arguments match the values used when the QRCoder library was used (prior to CSPro 8.0)
                m_qrCode = new CSPro.Util.QRCode(payload, "Q", 20, 6);
                m_qrCodeBitmap = m_qrCode.GetBitmap();
            }

            catch( Exception exception )
            {
                MessageBox.Show($"Error: {exception.Message}");
                m_qrCodeBitmap = new Bitmap(1, 1);
            }

            return m_qrCodeBitmap;
        }

        private void checkBoxUsernamePassword_CheckedChanged(object sender, EventArgs e)
        {
            textBoxUsername.Enabled = checkBoxUsernamePassword.Checked;
            textBoxPassword.Enabled = checkBoxUsernamePassword.Checked;

            UpdateHyperlink();
        }

        private void textBoxUsername_TextChanged(object sender, EventArgs e)
        {
            UpdateHyperlink();
        }

        private void textBoxPassword_TextChanged(object sender, EventArgs e)
        {
            UpdateHyperlink();
        }

        private void buttonOK_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.OK;
        }

        private void buttonPrint_Click(object sender, EventArgs e)
        {
            printDocument.DocumentName = $"QR Code for {m_packageName}";
            if (printDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    printDocument.Print();
                } catch (Exception err)
                {
                    MessageBox.Show($"Error: {err.Message}");
                }
            }
        }

        private void printDocument_PrintPage(object sender, System.Drawing.Printing.PrintPageEventArgs e)
        {
            RectangleF pageBounds = e.MarginBounds;
            var titleFont = new Font("Arial", 16, FontStyle.Bold);
            e.Graphics.DrawString(labelInstructions.Text, titleFont, Brushes.Black, pageBounds);
            var titleSize = e.Graphics.MeasureString(labelInstructions.Text, titleFont, pageBounds.Size);

            pageBounds = new RectangleF(pageBounds.X, pageBounds.Y + titleSize.Height, pageBounds.Width, pageBounds.Height - titleSize.Height);

            var footnote = $"Generated by CSPro {DateTime.Now.ToString("dd MMMM yyyy HH:mm")}";
            var footnoteFont = new Font("Arial", 10);
            var footnoteSize = e.Graphics.MeasureString(footnote, footnoteFont, pageBounds.Size);
            var footnoteBounds = new RectangleF(pageBounds.X, pageBounds.Y + pageBounds.Height - footnoteSize.Height, footnoteSize.Width, footnoteSize.Height);
            e.Graphics.DrawString(footnote, footnoteFont, Brushes.Black, footnoteBounds);

            var separatorLineY = pageBounds.Y + pageBounds.Height - footnoteSize.Height;
            e.Graphics.DrawLine(Pens.Black, pageBounds.X, separatorLineY, pageBounds.X + pageBounds.Width, separatorLineY);

            pageBounds = new RectangleF(pageBounds.X, pageBounds.Y, pageBounds.Width, pageBounds.Height - footnoteSize.Height);

            // Bitmap should be about 2x2 inches, DPI is 100
            var idealPrintedSize = 2 * 100;
            var printedSize = Math.Min(Math.Min(idealPrintedSize, pageBounds.Width), pageBounds.Height);

            // center QR Code in page
            float left = (e.Graphics.VisibleClipBounds.Width - printedSize) /2;
            float top = (e.Graphics.VisibleClipBounds.Height - printedSize) / 2;

            e.Graphics.DrawImage(m_qrCodeBitmap, left, top, printedSize, printedSize);

            // Indicate that this is the last page to print.
            e.HasMorePages = false;

        }

        private void buttonSave_Click(object sender, EventArgs e)
        {
            SaveFileDialog fileDialog = new SaveFileDialog();
            fileDialog.Title = Messages.QRCodeFileSaveTitle;
            fileDialog.Filter = Messages.QRCodeFileFilter;
            if (fileDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    m_qrCodeBitmap.Save(fileDialog.FileName);
                } catch (Exception ex)
                {
                    MessageBox.Show($"Error saving image: {ex.Message}");
                }
            }
        }
    }
}
