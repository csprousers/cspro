#include "stdafx.h"
#include "FunctionTable.h"
#include "ActionInvoker.h"
#include "Symbol.h"

using namespace Logic;


// --------------------------------------------------------------------------
// FunctionDetails
// --------------------------------------------------------------------------

namespace
{
    const FunctionNamespaceDetails FunctionNamespaces[] =
    {
        { _T("Barcode"),    FunctionNamespace::Barcode,         std::nullopt,           _T("Barcode.html"),      },
        { _T("Path"),       FunctionNamespace::Path,            std::nullopt,           _T("Path.html")          },

        // --- CS_AUTOGENERATED_START -----------------------------------------------

        { _T("CS"),          FunctionNamespace::CS,             std::nullopt,           _T("action_invoker.html") },
        { _T("Application"), FunctionNamespace::CS_Application, FunctionNamespace::CS,  _T("CS_Application.html") },
        { _T("Clipboard"),   FunctionNamespace::CS_Clipboard,   FunctionNamespace::CS,  _T("CS_Clipboard.html")   },
        { _T("Data"),        FunctionNamespace::CS_Data,        FunctionNamespace::CS,  _T("CS_Data.html")        },
        { _T("Dictionary"),  FunctionNamespace::CS_Dictionary,  FunctionNamespace::CS,  _T("CS_Dictionary.html")  },
        { _T("File"),        FunctionNamespace::CS_File,        FunctionNamespace::CS,  _T("CS_File.html")        },
        { _T("Hash"),        FunctionNamespace::CS_Hash,        FunctionNamespace::CS,  _T("CS_Hash.html")        },
        { _T("Localhost"),   FunctionNamespace::CS_Localhost,   FunctionNamespace::CS,  _T("CS_Localhost.html")   },
        { _T("Logic"),       FunctionNamespace::CS_Logic,       FunctionNamespace::CS,  _T("CS_Logic.html")       },
        { _T("Message"),     FunctionNamespace::CS_Message,     FunctionNamespace::CS,  _T("CS_Message.html")     },
        { _T("Path"),        FunctionNamespace::CS_Path,        FunctionNamespace::CS,  _T("CS_Path.html")        },
        { _T("Settings"),    FunctionNamespace::CS_Settings,    FunctionNamespace::CS,  _T("CS_Settings.html")    },
        { _T("Sqlite"),      FunctionNamespace::CS_Sqlite,      FunctionNamespace::CS,  _T("CS_Sqlite.html")      },
        { _T("System"),      FunctionNamespace::CS_System,      FunctionNamespace::CS,  _T("CS_System.html")      },
        { _T("UI"),          FunctionNamespace::CS_UI,          FunctionNamespace::CS,  _T("CS_UI.html")          },

        // --- CS_AUTOGENERATED_END -------------------------------------------------
    };


    const FunctionDetails Functions[] =
    {
        // --------------------------------------------------------------------------
        // regular (non-symbol) functions
        // --------------------------------------------------------------------------
        {
            _T("abs"),
            _T("abs(Numeric_Expression)"),
            _T("abs_function.html"),
            FunctionCode::FNABS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("accept"),
            _T("accept(Title as String_Expression, Option1 as String_Expression, Option2 as String_Expression, [Option3 as String_Expression, ...])"),
            _T("accept_function.html"),
            FunctionCode::FNACCEPT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            -1,
        },
        {
            _T("adjlba"),
            _T("adjlba(Lower_CMCode1 as Numeric_Expression, Upper_CMCode1 as Numeric_Expression, Lower_CMCode2 as Numeric_Expression, Upper_CMCode2 as Numeric_Expression, Age as Numeric_Expression)"),
            _T("adjlba_function.html"),
            FunctionCode::FNADJLBA_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            5,
        },
        {
            _T("adjlbi"),
            _T("adjlbi(Lower_CMCode1 as Numeric_Expression, Upper_CMCode1 as Numeric_Expression, Lower_CMCode2 as Numeric_Expression, Upper_CMCode2 as Numeric_Expression, Interval as Numeric_Expression)"),
            _T("adjlbi_function.html"),
            FunctionCode::FNADJLBI_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            5,
        },
        {
            _T("adjuba"),
            _T("adjuba(Lower_CMCode1 as Numeric_Expression, Upper_CMCode1 as Numeric_Expression, Lower_CMCode2 as Numeric_Expression, Upper_CMCode2 as Numeric_Expression, Age as Numeric_Expression)"),
            _T("adjuba_function.html"),
            FunctionCode::FNADJUBA_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            5,
        },
        {
            _T("adjubi"),
            _T("adjubi(Lower_CMCode1 as Numeric_Expression, Upper_CMCode1 as Numeric_Expression, Lower_CMCode2 as Numeric_Expression, Upper_CMCode2 as Numeric_Expression, Interval as Numeric_Expression)"),
            _T("adjubi_function.html"),
            FunctionCode::FNADJUBI_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            5,
        },
        {
            _T("average"),
            _T("average(Multiple_Item WHERE Logical_Expression)"),
            _T("average_function.html"),
            FunctionCode::FNAVERAGE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("changekeyboard"),
            _T("changekeyboard(Dict-symbol,[Keyboard-ID])"),
            _T("changekeyboard_function.html"),
            FunctionCode::FNCHANGEKEYBOARD_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("clear"),
            _T("clear(Dictionary_Record_or_Item)"),
            _T("clear_function.html"),
            FunctionCode::FNCLRCASE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNC,
            -1,
        },
        {
            _T("close"),
            _T("close(Dictionary_Name|File_Name)"),
            _T("close_function.html"),
            FunctionCode::FNCLOSE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("cmcode"),
            _T("cmcode(Month as Numeric_Expression, Year as Numeric_Expression)"),
            _T("cmcode_function.html"),
            FunctionCode::FNCMCODE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("compare"),
            _T("compare(String_Expression, String_Expression)"),
            _T("compare_function.html"),
            FunctionCode::FNCOMPARE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("compareNoCase"),
            _T("compareNoCase(String_Expression, String_Expression)"),
            _T("compareNoCase_function.html"),
            FunctionCode::FNCOMPARENOCASE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsFixedN,
            2,
        },
        {
            _T("compress"),
            _T("compress(zip_file as String_Expression,file_list as String_Expression or List)"),
            _T("compress_function.html"),
            FunctionCode::FNCOMPRESS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("concat"),
            _T("concat(String_Expression, String_Expression, [String_Expression, ...])"),
            _T("concat_function.html"),
            FunctionCode::FNCONCAT_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsVaryingN,
            -2,
        },
        {
            _T("connection"),
            _T("connection([WiFi | Mobile])"),
            _T("connection_function.html"),
            FunctionCode::FNCONNECTION_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("count"),
            _T("count(Group WHERE Logical_Expression)"),
            _T("count_function.html"),
            FunctionCode::FNCOUNT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN2,
            2,
        },
        {
            _T("countcases"),
            _T("countcases(Dictionary_Name [WHERE Logical_Expression])"),
            _T("countcases_function.html"),
            FunctionCode::FNCOUNTCASES_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::DictionaryVarious,
            0,
        },
        {
            _T("countnonspecial"),
            _T("countnonspecial(Item|Record|Numeric_Expression,[...])"),
            _T("countnonspecial_function.html"),
            FunctionCode::FNCOUNTVALID_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNITEMLIST,
            -1,
        },
        {
            _T("countvalid"),
            _T("countvalid(Item|Record|Numeric_Expression,[...])"),
            _T("countnonspecial_function.html"),
            FunctionCode::FNCOUNTVALID_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNITEMLIST,
            -1,
        },
        {
            _T("curocc"),
            _T("curocc(Group)"),
            _T("curocc_function.html"),
            FunctionCode::FNCUROCC_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNGR,
            1,
        },
        {
            _T("currentkey"),
            _T("currentkey(Dictionary_Name)"),
            _T("currentkey_function.html"),
            FunctionCode::FNCURRENTKEY_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("dateadd"),
            _T("dateadd(date, period[, period_format])"),
            _T("dateadd_function.html"),
            FunctionCode::FNDATEADD_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentSpecification,
            3,
        },
        {
            _T("datediff"),
            _T("datediff(Date1 as Numeric_Expression,Date2 as Numeric_Expression,[Date_Format as String_Expression])"),
            _T("datediff_function.html"),
            FunctionCode::FNDATEDIFF_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentSpecification,
            3,
        },
        {
            _T("datevalid"),
            _T("datevalid(Date as Numeric_Expression)"),
            _T("datevalid_function.html"),
            FunctionCode::FNDATEVALID_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("decompress"),
            _T("decompress(zip_file as String_Expression[,output_directory as String_Expression])"),
            _T("decompress_function.html"),
            FunctionCode::FNDECOMPRESS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentSpecification,
            2,
        },
        {
            _T("delcase"),
            _T("delcase(Dictionary_Name)"),
            _T("delcase_function.html"),
            FunctionCode::FNDELCASE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::CaseIO,
            -1,
        },
        {
            _T("delete"),
            _T("delete(Group[(occ)])"),
            _T("delete_function.html"),
            FunctionCode::FNDELETE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNID,
            1,
        },
        {
            _T("demode"),
            _T("demode()"),
            _T("demode_function.html"),
            FunctionCode::FNDEMODE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("diagnostics"),
            _T("diagnostics(parameter as String_Expression[, arguments as String_Expressions])"),
            _T("diagnostics_function.html"),
            FunctionCode::FNDIAGNOSTICS_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNSTRPARM,
            0,
        },
        {
            _T("dircreate"),
            _T("dircreate(String_Expression)"),
            _T("dircreate_function.html"),
            FunctionCode::FNDIRCREATE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("dirdelete"),
            _T("dirdelete(String_Expression)"),
            _T("dirdelete_function.html"),
            FunctionCode::FNDIRDELETE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("direxist"),
            _T("direxist(String_Expression)"),
            _T("direxist_function.html"),
            FunctionCode::FNDIREXIST_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("dirlist"),
            _T("dirlist(string_list, directory[, filter, recursive])"),
            _T("dirlist_function.html"),
            FunctionCode::FNDIRLIST_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Path,
            -1,
        },
        {
            _T("display"),
            _T("display(Message, [Item, [Item ...]])"),
            _T("deprecated_features.html"),
            FunctionCode::FNDISPLAY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Message,
            -1,
        },
        {
            _T("edit"),
            _T("edit(Edit_String_Expression, Numeric_Expression)"),
            _T("edit_function.html"),
            FunctionCode::FNEDIT_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentSpecification,
            2,
        },
        {
            _T("editnote"),
            _T("editnote([Item|Record|Dictionary],[Operator ID as String_Expression])"),
            _T("editnote_function.html"),
            FunctionCode::FNEDITNOTE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNNOTE,
            0,
        },
        {
            _T("encode"),
            _T("encode([Encode_Type,] String_Expression)"),
            _T("encode_function.html"),
            FunctionCode::FNENCODE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("errmsg"),
            _T("errmsg(Message, [Item, [Item ...]]) [DENOM=var] [CASE|SUMMARY]"),
            _T("errmsg_function.html"),
            FunctionCode::FNERRMSG_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Message,
            -1,
        },
        {
            _T("execpff"),
            _T("execpff(File_Name as String_Expression, [MAXIMIZED|NORMAL|MINIMIZED], [FOCUS|NOFOCUS], [WAIT|NOWAIT])"),
            _T("execpff_function.html"),
            FunctionCode::FNEXECPFF_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNEXECSYSTEM,
            -1,
        },
        {
            _T("execsystem"),
            _T("execsystem(String_Expression, [MAXIMIZED|NORMAL|MINIMIZED], [FOCUS|NOFOCUS], [WAIT|NOWAIT])"),
            _T("execsystem_function_desktop.html"),
            FunctionCode::FNEXECSYSTEM_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNEXECSYSTEM,
            -1,
        },
        {
            _T("exp"),
            _T("exp(Numeric_Expression)"),
            _T("exp_function.html"),
            FunctionCode::FNEXP_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("fileconcat"),
            _T("fileconcat(Result_File_Name, File1[, File2[, ...]])"),
            _T("fileconcat_function.html"),
            FunctionCode::FNFILE_CONCAT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            -2,
        },
        {
            _T("filecopy"),
            _T("filecopy(File_Name|String_Expression, Copied_File_Name|String_Expression)"),
            _T("filecopy_function.html"),
            FunctionCode::FNFILE_COPY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            2,
        },
        {
            _T("filecreate"),
            _T("filecreate(File_Name|String_Expression)"),
            _T("filecreate_function.html"),
            FunctionCode::FNFILE_CREATE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            1,
        },
        {
            _T("filedelete"),
            _T("filedelete(File_Name|String_Expression)"),
            _T("filedelete_function.html"),
            FunctionCode::FNFILE_DELETE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            1,
        },
        {
            _T("fileempty"),
            _T("fileempty(File_Name|String_Expression)"),
            _T("fileempty_function.html"),
            FunctionCode::FNFILE_EMPTY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            1,
        },
        {
            _T("fileexist"),
            _T("fileexist(File_Name|String_Expression)"),
            _T("fileexist_function.html"),
            FunctionCode::FNFILE_EXIST_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            1,
        },
        {
            _T("filename"),
            _T("filename(dictionary_name | file_name | pff_name | audio_name)"),
            _T("filename_function.html"),
            FunctionCode::FNFILENAME_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("fileread"),
            _T("fileread(File_Name, string_variable | string_list)"),
            _T("fileread_function.html"),
            FunctionCode::FNFILE_READ_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            3,
        },
        {
            _T("filerename"),
            _T("filerename(Old_File_Name|String_Expression, New_File_Name|String_Expression)"),
            _T("filerename_function.html"),
            FunctionCode::FNFILE_RENAME_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            2,
        },
        {
            _T("filesize"),
            _T("filesize(File_Name|String_Expression)"),
            _T("filesize_function.html"),
            FunctionCode::FNFILE_SIZE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            1,
        },
        {
            _T("filetime"),
            _T("filetime(File_Name | String_Expression)"),
            _T("filetime_function.html"),
            FunctionCode::FNFILETIME_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            1,
        },
        {
            _T("filewrite"),
            _T("filewrite(File_Name, string_expression | string_list)"),
            _T("filewrite_function.html"),
            FunctionCode::FNFILE_WRITE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::File,
            -2,
        },
        {
            _T("find"),
            _T("find(Dictionary_Name, Relational_Operator, String_Expression)"),
            _T("find_function.html"),
            FunctionCode::FNFIND_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::CaseSearch,
            3,
        },
        {
            _T("getbluetoothname"),
            _T("getbluetoothname()"),
            _T("getbluetoothname_function.html"),
            FunctionCode::FNGETBLUETOOTHNAME_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("getbuffer"),
            _T("getbuffer(Item_Name)"),
            _T("getbuffer_function.html"),
            FunctionCode::FNGETBUFFER_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNB,
            1,
        },
        {
            _T("getcapturetype"),
            _T("getcapturetype(Dict-symbol)"),
            _T("getcapturetype_function.html"),
            FunctionCode::FNGETCAPTURETYPE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNCAPTURETYPE,
            0,
        },
        {
            _T("getcaselabel"),
            _T("getcaselabel(Dictionary_Name)"),
            _T("getcaselabel_function.html"),
            FunctionCode::FNGETCASELABEL_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FN8,
            0,
        },
        {
            _T("getdeck"),
            _T("getdeck(DeckArray,[...])"),
            _T("getdeck_function.html"),
            FunctionCode::FNGETDECK_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNDECK,
            0,
        },
        {
            _T("getdeviceid"),
            _T("getdeviceid()"),
            _T("getdeviceid_function.html"),
            FunctionCode::FNGETDEVICEID_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("getimage"),
            _T("getimage(Item-Name | ValueSet-Name,Value)"),
            _T("getimage_function.html"),
            FunctionCode::FNGETIMAGE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNG,
            -1,
        },
        {
            _T("getlabel"),
            _T("getlabel(Dict-symbol, Value)"),
            _T("getlabel_function.html"),
            FunctionCode::FNGETLABEL_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNG,
            -1,
        },
        {
            _T("getlanguage"),
            _T("getlanguage()"),
            _T("getlanguage_function.html"),
            FunctionCode::FNGETLANGUAGE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("getnote"),
            _T("getnote([Item|Record|Dictionary],[Operator ID as String_Expression])"),
            _T("getnote_function.html"),
            FunctionCode::FNGETNOTE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNNOTE,
            0,
        },
        {
            _T("getocclabel"),
            _T("getocclabel(Dict-symbol|Group[(occ)])"),
            _T("getocclabel_function.html"),
            FunctionCode::FNGETOCCLABEL_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNOCCS,
            1,
        },
        {
            _T("getoperatorid"),
            _T("getoperatorid()"),
            _T("getoperatorid_function.html"),
            FunctionCode::FNGETOPERATORID_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("getorientation"),
            _T("getorientation()"),
            _T("screen_orientation.html"),
            FunctionCode::FNGETORIENTATION_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("getos"),
            _T("getos([string_variable])"),
            _T("getos_function.html"),
            FunctionCode::FNGETOS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("getproperty"),
            _T("getproperty([Dictionary_Symbol,] property)"),
            _T("getproperty_function.html"),
            FunctionCode::FNGETPROPERTY_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNPROPERTY,
            2,
        },
        {
            _T("getrecord"),
            _T("getrecord(String_Expression)"),
            _T("getrecord_function.html"),
            FunctionCode::FNGETRECORD_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("getsymbol"),
            _T("getsymbol()"),
            _T("getsymbol_function.html"),
            FunctionCode::FNGETSYMBOL_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FNG,
            -1,
        },
        {
            _T("getusername"),
            _T("getusername()"),
            _T("getusername_function.html"),
            FunctionCode::FNGETUSERNAME_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("getvalue"),
            _T("getvalue(String_Expression,[Occurrences as Numeric_Expressions])"),
            _T("getvalue_function.html"),
            FunctionCode::FNGETVALUE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("getvaluealpha"),
            _T("getvaluealpha(String_Expression,[Occurrences as Numeric_Expressions])"),
            _T("getvalue_function.html"),
            FunctionCode::FNGETVALUEALPHA_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("getvaluelabel"),
            _T("getvaluelabel(Item_Name)"),
            _T("getvaluelabel_function.html"),
            FunctionCode::FNGETVALUELABEL_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("getvaluenumeric"),
            _T("getvaluenumeric(String_Expression,[Occurrences as Numeric_Expressions])"),
            _T("getvalue_function.html"),
            FunctionCode::FNGETVALUE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("gps"),
            _T("gps(Open/Close/Read/ReadInteractive/Select/Latitude/Longitude)"),
            _T("gps_function.html"),
            FunctionCode::FNGPS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::GPS,
            1,
        },
        {
            _T("hash"),
            _T("hash(expression)"),
            _T("hash_function.html"),
            FunctionCode::FNHASH_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            1,
        },
        {
            _T("hideocc"),
            _T("hideocc(Group[(occ)])"),
            _T("hideocc_function.html"),
            FunctionCode::FNHIDEOCC_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNOCCS,
            1,
        },
        {
            _T("high"),
            _T("high(Numeric_Expression,[...])"),
            _T("high_function.html"),
            FunctionCode::FNHIGH_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            -1,
        },
        {
            _T("highlighted"),
            _T("highlighted(Field)"),
            _T("highlighted_function.html"),
            FunctionCode::FNHIGHLIGHT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNH,
            2,
        },
        {
            _T("htmldialog"),
            _T("htmldialog(html_filename[, input_data, flags])"),
            _T("htmldialog_function.html"),
            FunctionCode::FNHTMLDIALOG_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            -1,
        },
        {
            _T("impute"),
            _T("impute(item_name, new_value)"),
            _T("impute_function.html"),
            FunctionCode::FNIMPUTE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Impute,
            0,
        },
        {
            _T("inadvance"),
            _T("inadvance()"),
            _T("inadvance_function.html"),
            FunctionCode::FNINADVANCE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("inc"),
            _T("inc(numeric_value, [increment_value])"),
            _T("inc_function.html"),
            FunctionCode::FNINC_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            2,
        },
        {
            _T("insert"),
            _T("insert(Group[(occ)])"),
            _T("insert_function.html"),
            FunctionCode::FNINSERT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNID,
            1,
        },
        {
            _T("int"),
            _T("int(Numeric_Expression)"),
            _T("int_function.html"),
            FunctionCode::FNINT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("invalueset"),
            _T("invalueset(Item[,ValueSet])"),
            _T("invalueset_function.html"),
            FunctionCode::FNINVALUESET_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNINVALUESET,
            1,
        },
        {
            _T("invoke"),
            _T("invoke(function_name[, arguments])"),
            _T("invoke_function.html"),
            FunctionCode::FNINVOKE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Invoke,
            0,
        },
        {
            _T("ischecked"),
            _T("ischecked(code, check_box_field)"),
            _T("ischecked_function.html"),
            FunctionCode::FNISCHECKED_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("ispartial"),
            _T("ispartial([Dictionary_Name])"),
            _T("ispartial_function.html"),
            FunctionCode::FNISPARTIAL_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            0,
        },
        {
            _T("isverified"),
            _T("isverified(Dictionary_Name)"),
            _T("isverified_function.html"),
            FunctionCode::FNISVERIFIED_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            0,
        },
        {
            _T("itemlist"),
            _T("itemlist(Item|Record|String_Expression|Numeric_Expression,[...])"),
            nullptr,
            FunctionCode::FNITEMLIST_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Removed,
            95031,
        },
        {
            _T("key"),
            _T("key(Dictionary_Name)"),
            _T("key_function.html"),
            FunctionCode::FNKEY_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("keylist"),
            _T("keylist(Dictionary_Name[,List])"),
            _T("keylist_function.html"),
            FunctionCode::FNKEYLIST_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("length"),
            _T("length(String_Expression)"),
            _T("length_function.html"),
            FunctionCode::FNLENGTH_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            1,
        },
        {
            _T("loadcase"),
            _T("loadcase(Dictionary_Name,[Item, ...])"),
            _T("loadcase_function.html"),
            FunctionCode::FNLOADCASE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::CaseIO,
            -1,
        },
        {
            _T("loadsetting"),
            _T("loadsetting(Attribute[,Default Value])"),
            _T("loadsetting_function.html"),
            FunctionCode::FNLOADSETTING_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("locate"),
            _T("locate(Dictionary_Name, Relational_Operator, String_Expression)"),
            _T("locate_function.html"),
            FunctionCode::FNLOCATE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::CaseSearch,
            3,
        },
        {
            _T("log"),
            _T("log(Numeric_Expression)"),
            _T("log_function.html"),
            FunctionCode::FNLOG_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("logtext"),
            _T("logtext(Message, [Item, [Item ...]])"),
            _T("logtext_function.html"),
            FunctionCode::FNLOGTEXT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Message,
            -1,
        },
        {
            _T("low"),
            _T("low(Numeric_Expression,[...])"),
            _T("low_function.html"),
            FunctionCode::FNLOW_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            -1,
        },
        {
            _T("maketext"),
            _T("maketext(Message, [Item, [Item ...]])"),
            _T("maketext_function.html"),
            FunctionCode::FNMAKETEXT_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Message,
            -1,
        },
        {
            _T("max"),
            _T("max(Multiple_Item WHERE Logical_Expression)"),
            _T("max_function.html"),
            FunctionCode::FNMAX_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("maxocc"),
            _T("maxocc([Group|Record|Item])"),
            _T("maxocc_function.html"),
            FunctionCode::FNMAXOCC_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNMAXOCC,
            1,
        },
        {
            _T("maxvalue"),
            _T("maxvalue(Item_Name | ValueSet_Name)"),
            _T("maxvalue_function.html"),
            FunctionCode::FNMAXVALUE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNC,
            1,
        },
        {
            _T("min"),
            _T("min(Multiple_Item WHERE Logical_Expression)"),
            _T("min_function.html"),
            FunctionCode::FNMIN_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("minvalue"),
            _T("minvalue(Item_Name | ValueSet_Name)"),
            _T("minvalue_function.html"),
            FunctionCode::FNMINVALUE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNC,
            1,
        },
        {
            _T("nmembers"),
            _T("nmembers(Dictionary_Name)"),
            _T("nmembers_function.html"),
            FunctionCode::FNNMEMBERS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::DictionaryVarious,
            0,
        },
        {
            _T("noccurs"),
            _T("noccurs(Group"),
            _T("noccurs_function.html"),
            FunctionCode::FNNOCCURS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN4,
            1,
        },
        {
            _T("open"),
            _T("open(Dictionary_Name|File_Name[, CREATE|APPEND])"),
            _T("open_function.html"),
            FunctionCode::FNOPEN_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("paradata"),
            _T("paradata(Open | Close | Flush | Concat | Query[,Parameters])"),
            _T("paradata_function.html"),
            FunctionCode::FNPARADATA_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Paradata,
            0,
        },
        {
            _T("pathconcat"),
            _T("pathconcat(path1[, path2, ...])"),
            _T("pathconcat_function.html"),
            FunctionCode::FNPATHCONCAT_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Path,
            -1,
        },
        {
            _T("pathname"),
            _T("pathname(path_type)"),
            _T("pathname_function.html"),
            FunctionCode::FNPATHNAME_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Path,
            1,
        },
        {
            _T("pos"),
            _T("pos(Pattern_String_Expression, Source_String_Expression)"),
            _T("pos_function.html"),
            FunctionCode::FNPOS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("poschar"),
            _T("poschar(Pattern_String_Expression, Source_String_Expression)"),
            _T("poschar_function.html"),
            FunctionCode::FNPOSCHAR_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("prompt"),
            _T("prompt(Title as String_Expression[, InitialValue as String_Expression][, Password | UpperCase | Numeric | Multiline])"),
            _T("prompt_function.html"),
            FunctionCode::FNPROMPT_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("protect"),
            _T("protect(dictionary_symbol, true | false)"),
            _T("protect_function.html"),
            FunctionCode::FNPROTECT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            2,
        },
        {
            _T("publishdate"),
            _T("publishdate()"),
            _T("publishdate_function.html"),
            FunctionCode::FNPUBLISHDATE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("putdeck"),
            _T("putdeck(DeckArray,Expression,[...])"),
            _T("putdeck_function.html"),
            FunctionCode::FNPUTDECK_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNDECK,
            0,
        },
        {
            _T("putnote"),
            _T("putnote(Note as String_Expression,[Item|Record|Dictionary],[Operator ID as String_Expression])"),
            _T("putnote_function.html"),
            FunctionCode::FNPUTNOTE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNNOTE,
            0,
        },
        {
            _T("random"),
            _T("random(Numeric_Expression, Numeric_Expression)"),
            _T("random_function.html"),
            FunctionCode::FNRANDOM_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("randomin"),
            _T("randomin(In_List_of_Numeric_Expressions)"),
            _T("randomin_function.html"),
            FunctionCode::FNRANDOMIN_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("randomizevs"),
            _T("randomizevs(ValueSet-Name,[exclude(Numeric_Expression,...)])"),
            _T("randomizevs_function.html"),
            FunctionCode::FNRANDOMIZEVS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("regexmatch"),
            _T("regexmatch(target, regex)"),
            _T("regexmatch_function.html"),
            FunctionCode::FNREGEXMATCH_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            2,
        },
        {
            _T("replace"),
            _T("replace(source_text, old_text, new_text)"),
            _T("replace_function.html"),
            FunctionCode::FNREPLACE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsVaryingN,
            3,
        },
        {
            _T("Report"), // written as Report because this is now generally used for CSPro 7.7+ report (objects)
            _T("report(Template_Filename, [Output_Filename])"),
            _T("templated_reports.html"),
            FunctionCode::FNPRE77_REPORT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Removed,
            95029,
        },
        {
            _T("retrieve"),
            _T("retrieve(Dictionary_Name)"),
            _T("retrieve_function.html"),
            FunctionCode::FNRETRIEVE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::DictionaryVarious,
            1,
        },
        {
            _T("round"),
            _T("round(Numeric_Expression)"),
            _T("round_function.html"),
            FunctionCode::FNROUND_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("savepartial"),
            _T("savepartial()"),
            _T("savepartial_function.html"),
            FunctionCode::FNSAVEPARTIAL_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("savesetting"),
            _T("savesetting(Attribute,Value)"),
            _T("savesetting_function.html"),
            FunctionCode::FNSAVESETTING_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("seed"),
            _T("seed(Numeric_Expression)"),
            _T("seed_function.html"),
            FunctionCode::FNSEED_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("seek"),
            _T("seek(Multiple_Item WHERE Logical_Expression[,Starting Position])"),
            _T("seek_function.html"),
            FunctionCode::FNSEEK_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("seekmax"),
            _T("seekmax(Multiple_Item WHERE Logical_Expression[,Starting Position])"),
            _T("seekmax_function.html"),
            FunctionCode::FNSEEKMAX_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("seekmin"),
            _T("seekmin(Multiple_Item WHERE Logical_Expression[,Starting Position])"),
            _T("seekmin_function.html"),
            FunctionCode::FNSEEKMIN_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("selcase"),
            _T("selcase(Dictionary_Name, Key_Prefix as String_Expression, Offset as Integer)"),
            _T("selcase_function.html"),
            FunctionCode::FNSELCASE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNS,
            2,
        },
        {
            _T("setbluetoothname"),
            _T("setbluetoothname(name)"),
            _T("setbluetoothname_function.html"),
            FunctionCode::FNSETBLUETOOTHNAME_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("setcapturepos"),
            _T("setcapturepos(Dict-symbol,X-Coord,Y-Coord)"),
            _T("setcapturepos_function.html"),
            FunctionCode::FNSETCAPTUREPOS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNCAPTURETYPE,
            0,
        },
        {
            _T("setcapturetype"),
            _T("setcapturetype(Dict-symbol,Capture_Type as Numeric_Expression[,Date_Format as String_Expression])"),
            _T("setcapturetype_function.html"),
            FunctionCode::FNSETCAPTURETYPE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNCAPTURETYPE,
            0,
        },
        {
            _T("setcaselabel"),
            _T("setcaselabel(Dictionary_Name,String_Expression)"),
            _T("setcaselabel_function.html"),
            FunctionCode::FNSETCASELABEL_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            0,
        },
        {
            _T("setfile"),
            _T("setfile(Dictionary_Name|File_Name, Full_Path[, CREATE|APPEND])"),
            _T("setfile_function.html"),
            FunctionCode::FNSETFILE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::SetFile,
            0,
        },
        {
            _T("setfont"),
            _T("setfont(CSEntry_Control,Font_Name as String_Expression,Font_Size as Numeric_Expression[,Bold,Italics])"),
            _T("setfont_function.html"),
            FunctionCode::FNSETFONT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::UserInterface,
            0,
        },
        {
            _T("setlanguage"),
            _T("setlanguage(String_Expression)"),
            _T("setlanguage_function.html"),
            FunctionCode::FNSETLANGUAGE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("setlb"),
            _T("setlb(Month as Numeric_Expression, Year as Numeric_Expression, Min as Numeric_Expression)"),
            _T("setlb_function.html"),
            FunctionCode::FNSETLB_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            3,
        },
        {
            _T("setocclabel"),
            _T("setocclabel(Group[(occ)],String_Expression)"),
            _T("setocclabel_function.html"),
            FunctionCode::FNSETOCCLABEL_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNOCCS,
            1,
        },
        {
            _T("setoperatorid"),
            _T("setoperatorid(String_Expression)"),
            _T("setoperatorid_function.html"),
            FunctionCode::FNSETOPERATORID_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("setorientation"),
            _T("setorientation(Orientation as Numeric_Expression)"),
            _T("screen_orientation.html"),
            FunctionCode::FNSETORIENTATION_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("setoutput"),
            _T("setoutput(Full_Path)"),
            _T("setoutput_function.html"),
            FunctionCode::FNSETOUTPUT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            1,
        },
        {
            _T("setproperty"),
            _T("setproperty([Dictionary_Symbol,] property, value)"),
            _T("setproperty_function.html"),
            FunctionCode::FNSETPROPERTY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNPROPERTY,
            4,
        },
        {
            _T("setreportdata"),
            _T("setreportdata(Attribute, Record_Name | List_Name | Array_Name | SqlQuery(...))"),
            nullptr,
            FunctionCode::FNPRE77_SETREPORTDATA_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Removed,
            95029,
        },
        {
            _T("setub"),
            _T("setub(Month as Numeric_Expression, Year as Numeric_Expression, Max as Numeric_Expression)"),
            _T("setub_function.html"),
            FunctionCode::FNSETUB_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            3,
        },
        {
            _T("setvalue"),
            _T("setvalue(String_Expression,Numeric-Expression | String_Expression),[Occurrences as Numeric_Expressions])"),
            _T("setvalue_function.html"),
            FunctionCode::FNSETVALUE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("setvalueset"),
            _T("setvalueset(item_name, valueset_name)"),
            _T("setvalueset_function.html"),
            FunctionCode::FNSETVALUESET_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::SetValueSet,
            -1,
        },
        {
            _T("setvaluesets"),
            _T("setvaluesets(String_Expression)"),
            _T("setvaluesets_function.html"),
            FunctionCode::FNSETVALUESETS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("show"),
            _T("show(Multiple_Record|Group|Relation|Multiple_Item, Item_List [WHERE Log-Expression] [TITLE('Text1', ..., 'TextN')])"),
            _T("show_function.html"),
            FunctionCode::FNSHOW_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNSHOW,
            -1,
        },
        {
            _T("showarray"),
            _T("showarray(Alpha_Array,[Rows as Numeric_Expression],[Cols as Numeric Expression] | [TITLE('Text1', ..., 'TextN')])"),
            _T("showarray_function.html"),
            FunctionCode::FNSHOWARRAY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNSHOW,
            0,
        },
        {
            _T("showocc"),
            _T("showocc(Group[(occ)],[Numeric-Expression])"),
            _T("showocc_function.html"),
            FunctionCode::FNSHOWOCC_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNOCCS,
            1,
        },
        {
            _T("soccurs"),
            _T("soccurs(Record)"),
            _T("soccurs_function.html"),
            FunctionCode::FNSOCCURS_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN4,
            1,
        },
        {
            _T("sort"),
            _T("sort(Group using Item)"),
            _T("sort_function.html"),
            FunctionCode::FNSORT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNSRT,
            1,
        },
        {
            _T("special"),
            _T("special(Numeric_Expression)"),
            _T("special_function.html"),
            FunctionCode::FNSPECIAL_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("sqlquery"),
            _T("sqlquery(Paradata | Dictionary_Name | File_Full_Path[,Record_Name | List_Name | Array_Name], query as String_Expression)"),
            _T("sqlquery_function.html"),
            FunctionCode::FNSQLQUERY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("sqrt"),
            _T("sqrt(Numeric_Expression)"),
            _T("sqrt_function.html"),
            FunctionCode::FNSQRT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("startswith"),
            _T("startswith(Prefix_String_Expression, Source_String_Expression)"),
            _T("startswith_function.html"),
            FunctionCode::FNSTARTSWITH_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            2,
        },
        {
            _T("strip"),
            _T("strip(String_Expression)"),
            _T("strip_function.html"),
            FunctionCode::FNSTRIP_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("sum"),
            _T("sum(Multiple_Item WHERE Logical_Expression)"),
            _T("sum_function.html"),
            FunctionCode::FNSUM_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN3,
            2,
        },
        {
            _T("swap"),
            _T("swap(Group,Numeric_Expression,Numeric_Expression)"),
            _T("swap_function.html"),
            FunctionCode::FNSWAP_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNID,
            3,
        },
        {
            _T("syncapp"),
            _T("syncapp()"),
            _T("syncapp_function.html"),
            FunctionCode::FNSYNC_APP_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("syncconnect"),
            _T("syncconnect(CSWeb | Bluetooth | Dropbox | FTP | LocalDropbox | LocalFiles, [host as String_Expression | serverDeviceName as String_Expression | directory as String_Expression], [username as String_Expression], [password as String_Expression])"),
            _T("syncconnect_function.html"),
            FunctionCode::FNSYNC_CONNECT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Sync,
            -1,
        },
        {
            _T("syncdata"),
            _T("syncdata(GET | PUT | BOTH, Dictionary_Name [, universe as String_Expression])"),
            _T("syncdata_function.html"),
            FunctionCode::FNSYNC_DATA_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Sync,
            -2,
        },
        {
            _T("syncdisconnect"),
            _T("syncdisconnect()"),
            _T("syncdisconnect_function.html"),
            FunctionCode::FNSYNC_DISCONNECT_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsFixedN,
            0,
        },
        {
            _T("syncfile"),
            _T("syncfile(GET | PUT, from as String_Expression [, to as String_Expression])"),
            _T("syncfile_function.html"),
            FunctionCode::FNSYNC_FILE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Sync,
            -2,
        },
        {
            _T("syncmessage"),
            _T("syncmessage(message_name[, message_value])"),
            _T("syncmessage_function.html"),
            FunctionCode::FNSYNC_MESSAGE_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Sync,
            0,
        },
        {
            _T("syncparadata"),
            _T("syncparadata(GET | PUT | BOTH)"),
            _T("syncparadata_function.html"),
            FunctionCode::FNSYNC_PARADATA_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Sync,
            1,
        },
        {
            _T("syncserver"),
            _T("syncserver(Bluetooth, [file_root as String_Expression])"),
            _T("syncserver_function.html"),
            FunctionCode::FNSYNC_SERVER_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Sync,
            1,
        },
        {
            _T("synctime"),
            _T("synctime(Dictionary_Name[, Device_Identifier, Case_UUID])"),
            _T("synctime_function.html"),
            FunctionCode::FNSYNC_TIME_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Sync,
            3,
        },
        {
            _T("sysdate"),
            _T("sysdate(date_format[, timestamp])"),
            _T("sysdate_function.html"),
            FunctionCode::FNSYSDATE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentSpecification,
            2,
        },
        {
            _T("sysparm"),
            _T("sysparm([String_Expression])"),
            _T("sysparm_function.html"),
            FunctionCode::FNSYSPARM_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentSpecification,
            1,
        },
        {
            _T("systime"),
            _T("systime(time_format[, timestamp])"),
            _T("systime_function.html"),
            FunctionCode::FNSYSTIME_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentSpecification,
            2,
        },
        {
            _T("tblcol"),
            _T("tblcol(Table_Name, Item[(Integer)] = Numeric_Expression[*Item[(Integer)] = Numeric_Expression])"),
            nullptr,
            FunctionCode::FNTBLCOL_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNTC,
            3,
        },
        {
            _T("tbllay"),
            _T("tbllay(Table_Name, Item[(Integer)] = Numeric_Expression[*Item[(Integer)] = Numeric_Expression])"),
            nullptr,
            FunctionCode::FNTBLLAY_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNTC,
            3,
        },
        {
            _T("tblmed"),
            _T("tblmed(ROW|COLUMN|LAYER Table_Name[range,range,range]) INTERVALS(LOWERS Integer, Integer, [Integer, ...] HIGHEST Integer|DEFAULT)"),
            nullptr,
            FunctionCode::FNTBLMED_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN10,
            2,
        },
        {
            _T("tblrow"),
            _T("tblrow(Table_Name, Item[(Integer)] = Numeric_Expression[*Item[(Integer)] = Numeric_Expression])"),
            nullptr,
            FunctionCode::FNTBLROW_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNTC,
            3,
        },
        {
            _T("tblsum"),
            _T("tblsum(ROW|COLUMN|LAYER Table_Name[range,range,range])"),
            nullptr,
            FunctionCode::FNTBLSUM_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN10,
            2,
        },
        {
            _T("timestamp"),
            _T("timestamp()"),
            _T("timestamp_function.html"),
            FunctionCode::FNTIMESTAMP_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("timestring"),
            _T("timestring([TimeString_Format as String_Expression,] [Timestamp])"),
            _T("timestring_function.html"),
            FunctionCode::FNTIMESTRING_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("tolower"),
            _T("tolower(String_Expression)"),
            _T("tolower_function.html"),
            FunctionCode::FNTOLOWER_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("tonumber"),
            _T("tonumber(String_Expression)"),
            _T("tonumber_function.html"),
            FunctionCode::FNTONUMB_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("totocc"),
            _T("totocc(Group)"),
            _T("totocc_function.html"),
            FunctionCode::FNTOTOCC_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNGR,
            1,
        },
        {
            _T("toupper"),
            _T("toupper(String_Expression)"),
            _T("toupper_function.html"),
            FunctionCode::FNTOUPPER_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::ArgumentsVaryingN,
            1,
        },
        {
            _T("tr"),
            _T("tr(String_Expression | Message_Number)"),
            _T("tr_function.html"),
            FunctionCode::FNTR_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            1,
        },
        {
            _T("trace"),
            _T("trace(On/Off,[File_Name as String_Expression,Clear])"),
            _T("trace_function.html"),
            FunctionCode::FNTRACE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Trace,
            0,
        },
        {
            _T("update"),
            _T("update()"),
            nullptr,
            FunctionCode::FNUPDATE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN6,
            1,
        },
        {
            _T("userbar"),
            _T("userbar(Add [Text/Button/Field/Spacing]/Modify/Remove/Hide/Show/Clear/Set Color/Get,[...])"),
            _T("userbar_function.html"),
            FunctionCode::FNUSERBAR_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Userbar,
            0,
        },
        {
            _T("uuid"),
            _T("uuid()"),
            _T("uuid_function.html"),
            FunctionCode::FNUUID_CODE,
            SymbolType::None,
            DataType::String,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("view"),
            _T("view(file_name | website_address | object_name)"),
            _T("view_function.html"),
            FunctionCode::FNVIEW_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Various,
            1,
        },
        {
            _T("visualvalue"),
            _T("visualvalue(Field)"),
            _T("visualvalue_function.html"),
            FunctionCode::FNVISUALVALUE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FNH,
            2,
        },
        {
            _T("warning"),
            _T("warning(Message, [Item, [Item ...]])"),
            _T("warning_function.html"),
            FunctionCode::FNWARNING_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Message,
            -1,
        },
        {
            _T("write"),
            _T("write(Message, [Item, [Item ...]])"),
            _T("write_function.html"),
            FunctionCode::FNWRITE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::Message,
            -1,
        },
        {
            _T("writecase"),
            _T("writecase(Dictionary_Name)"),
            _T("writecase_function.html"),
            FunctionCode::FNWRITECASE_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::CaseIO,
            -1,
        },
        {
            _T("xtab"),
            _T("xtab(Table_name, Weight as Numeric_Expression)"),
            nullptr,
            FunctionCode::FNXTAB_CODE,
            SymbolType::None,
            DataType::Numeric,
            FunctionCompilationType::FN6,
            2,
        },


        // --------------------------------------------------------------------------
        // Symbol functions that apply to ALL symbols
        // --------------------------------------------------------------------------
        {
            _T("getLabel"),
            _T("symbol_name.getLabel()"),
            _T("Symbol_getLabel_function.html"),
            FunctionCode::SYMBOLFN_GETLABEL_CODE,
            AllSymbolsDomain(),
            DataType::String,
            FunctionCompilationType::Symbol,
            1,
            FunctionDetails::StaticType::AlwaysStatic,
        },
        {
            _T("getName"),
            _T("symbol_name.getName()"),
            _T("Symbol_getName_function.html"),
            FunctionCode::SYMBOLFN_GETNAME_CODE,
            AllSymbolsDomain(),
            DataType::String,
            FunctionCompilationType::Symbol,
            0,
            FunctionDetails::StaticType::AlwaysStatic,
        },
        {
            _T("getJson"),
            _T("symbol_name.getJson()"),
            _T("Symbol_getJson_function.html"),
            FunctionCode::SYMBOLFN_GETJSON_CODE,
            AllSymbolsDomain(),
            DataType::String,
            FunctionCompilationType::Symbol,
            1,
            FunctionDetails::StaticType::StaticWhenNecessary,
        },


        // --------------------------------------------------------------------------
        // Symbol functions that apply to SOME symbols
        // --------------------------------------------------------------------------
        {
            _T("getValueJson"),
            _T("symbol_name.getValueJson()"),
            _T("Symbol_getValueJson_function.html"),
            FunctionCode::SYMBOLFN_GETVALUEJSON_CODE,
            std::vector<SymbolType>
            {
                SymbolType::Array,          SymbolType::Audio,          SymbolType::Document,       SymbolType::Dictionary,     SymbolType::Pre80Dictionary,
                SymbolType::File,           SymbolType::Geometry,       SymbolType::HashMap,        SymbolType::Image,          SymbolType::List,
                SymbolType::NamedFrequency, SymbolType::Record,         SymbolType::SystemApp,      SymbolType::ValueSet,       SymbolType::WorkString,
                SymbolType::WorkVariable
            },
            DataType::String,
            FunctionCompilationType::Symbol,
            1,
        },
        {
            _T("updateValueFromJson"),
            _T("symbol_name.updateValueFromJson(json)"),
            _T("Symbol_updateValueFromJson_function.html"),
            FunctionCode::SYMBOLFN_UPDATEVALUEFROMJSON_CODE,
            std::vector<SymbolType>
            {
                SymbolType::Array,          SymbolType::Audio,          SymbolType::Document,       SymbolType::Geometry,       SymbolType::HashMap,
                SymbolType::Image,          SymbolType::List,           SymbolType::SystemApp,      SymbolType::ValueSet,       SymbolType::WorkString,
                SymbolType::WorkVariable
            },
            DataType::Numeric,
            FunctionCompilationType::Symbol,
            1,
        },


        // --------------------------------------------------------------------------
        // Array functions
        // --------------------------------------------------------------------------
        {
            _T("clear"),
            _T("array_name.clear()"),
            _T("Array_clear_function.html"),
            FunctionCode::ARRAYFN_CLEAR_CODE,
            SymbolType::Array,
            DataType::Numeric,
            FunctionCompilationType::Array,
            0,
        },
        {
            _T("length"),
            _T("array_name.length([dimension])"),
            _T("Array_length_function.html"),
            FunctionCode::ARRAYFN_LENGTH_CODE,
            SymbolType::Array,
            DataType::Numeric,
            FunctionCompilationType::Array,
            0,
        },


        // --------------------------------------------------------------------------
        // Audio functions
        // --------------------------------------------------------------------------
        {
            _T("clear"),
            _T("audio_name.clear()"),
            _T("Audio_clear_function.html"),
            FunctionCode::AUDIOFN_CLEAR_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            0,
        },
        {
            _T("concat"),
            _T("audio_name.concat(audio|filename)"),
            _T("Audio_concat_function.html"),
            FunctionCode::AUDIOFN_CONCAT_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            2,
        },
        {
            _T("length"),
            _T("audio_name.length()"),
            _T("Audio_length_function.html"),
            FunctionCode::AUDIOFN_LENGTH_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            0,
        },
        {
            _T("load"),
            _T("audio_name.load(filename)"),
            _T("Audio_load_function.html"),
            FunctionCode::AUDIOFN_LOAD_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            1,
        },
        {
            _T("play"),
            _T("audio_name.play([message])"),
            _T("Audio_play_function.html"),
            FunctionCode::AUDIOFN_PLAY_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            1,
        },
        {
            _T("record"),
            _T("audio_name.record([seconds])"),
            _T("Audio_record_function.html"),
            FunctionCode::AUDIOFN_RECORD_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            1,
        },
        {
            _T("recordInteractive"),
            _T("audio_name.recordInteractive([message])"),
            _T("Audio_recordInteractive_function.html"),
            FunctionCode::AUDIOFN_RECORD_INTERACTIVE_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            1,
        },
        {
            _T("save"),
            _T("audio_name.save(filename)"),
            _T("Audio_save_function.html"),
            FunctionCode::AUDIOFN_SAVE_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            1,
        },
        {
            _T("stop"),
            _T("audio_name.stop()"),
            _T("Audio_stop_function.html"),
            FunctionCode::AUDIOFN_STOP_CODE,
            SymbolType::Audio,
            DataType::Numeric,
            FunctionCompilationType::Audio,
            0,
        },


        // --------------------------------------------------------------------------
        // Barcode functions
        // --------------------------------------------------------------------------
        {
            _T("createQRCode"),
            _T("Barcode.createQRCode(filename, text | number[, options])"),
            _T("Barcode_createQRCode_function.html"),
            FunctionCode::BARCODEFN_CREATEQRCODE_CODE,
            FunctionNamespace::Barcode,
            DataType::Numeric,
            FunctionCompilationType::Barcode,
            0,
        },
        {
            _T("read"),
            _T("Barcode.read([message])"),
            _T("Barcode_read_function.html"),
            FunctionCode::BARCODEFN_READ_CODE,
            FunctionNamespace::Barcode,
            DataType::String,
            FunctionCompilationType::Barcode,
            0,
        },


        // --------------------------------------------------------------------------
        // Dictionary (Pre80Dictionary) functions
        // --------------------------------------------------------------------------
        {
            _T("view"),
            _T("dictionary_name.view()"), // ENGINECR_TODO: move to Case/DataSource
            _T("Case_view_function.html"),
            FunctionCode::CASEFN_VIEW_CODE,
            SymbolType::Pre80Dictionary,
            DataType::Numeric,
            FunctionCompilationType::Case,
            1,
        },


        // --------------------------------------------------------------------------
        // Document functions
        // --------------------------------------------------------------------------
        {
            _T("clear"),
            _T("document_name.clear()"),
            _T("Document_clear_function.html"),
            FunctionCode::DOCUMENTFN_CLEAR_CODE,
            SymbolType::Document,
            DataType::Numeric,
            FunctionCompilationType::Document,
            0,
        },
        {
            _T("load"),
            _T("document_name.load(filename)"),
            _T("Document_load_function.html"),
            FunctionCode::DOCUMENTFN_LOAD_CODE,
            SymbolType::Document,
            DataType::Numeric,
            FunctionCompilationType::Document,
            1,
        },
        {
            _T("save"),
            _T("document_name.save(filename)"),
            _T("Document_save_function.html"),
            FunctionCode::DOCUMENTFN_SAVE_CODE,
            SymbolType::Document,
            DataType::Numeric,
            FunctionCompilationType::Document,
            1,
        },
        {
            _T("view"),
            _T("document_name.view()"),
            _T("Document_view_function.html"),
            FunctionCode::DOCUMENTFN_VIEW_CODE,
            SymbolType::Document,
            DataType::Numeric,
            FunctionCompilationType::Document,
            1,
        },


        // --------------------------------------------------------------------------
        // Item functions
        // --------------------------------------------------------------------------
        {
            _T("getValueLabel"),
            _T("item_name.getValueLabel()"),
            _T("Item_getValueLabel_function.html"),
            FunctionCode::ITEMFN_GETVALUELABEL_CODE,
            SymbolType::Item,
            DataType::String,
            FunctionCompilationType::Item,
            2,
        },
        {
            _T("hasValue"),
            _T("item_name.hasValue()"),
            _T("Item_hasValue_function.html"),
            FunctionCode::ITEMFN_HASVALUE_CODE,
            SymbolType::Item,
            DataType::Numeric,
            FunctionCompilationType::Item,
            1,
        },
        {
            _T("isValid"),
            _T("item_name.isValid()"),
            _T("Item_isValid_function.html"),
            FunctionCode::ITEMFN_ISVALID_CODE,
            SymbolType::Item,
            DataType::Numeric,
            FunctionCompilationType::Item,
            1,
        },


        // --------------------------------------------------------------------------
        // File functions
        // --------------------------------------------------------------------------
        {
            _T("close"),
            _T("file_name.close()"),
            _T("File_close_function.html"),
            FunctionCode::FNCLOSE_CODE,
            SymbolType::File,
            DataType::Numeric,
            FunctionCompilationType::FN8,
            1,
        },
        {
            _T("open"),
            _T("file_name.open(file_name_path[, create | append])"),
            _T("File_open_function.html"),
            FunctionCode::FNSETFILE_CODE,
            SymbolType::File,
            DataType::Numeric,
            FunctionCompilationType::SetFile,
            0,
        },
        {
            _T("read"),
            _T("file_name.read(string_variable | string_list)"),
            _T("File_read_function.html"),
            FunctionCode::FNFILE_READ_CODE,
            SymbolType::File,
            DataType::Numeric,
            FunctionCompilationType::File,
            3,
        },
        {
            _T("write"),
            _T("file_name.write(string_expression | string_list)"),
            _T("File_write_function.html"),
            FunctionCode::FNFILE_WRITE_CODE,
            SymbolType::File,
            DataType::Numeric,
            FunctionCompilationType::File,
            -2,
        },


        // --------------------------------------------------------------------------
        // Geometry functions
        // --------------------------------------------------------------------------
        {
            _T("area"),
            _T("geometry_name.area()"),
            _T("Geometry_area_function.html"),
            FunctionCode::GEOMETRYFN_AREA_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("clear"),
            _T("geometry_name.clear()"),
            _T("Geometry_clear_function.html"),
            FunctionCode::GEOMETRYFN_CLEAR_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("getProperty"),
            _T("geometry_name.getProperty(name)"),
            _T("Geometry_getProperty_function.html"),
            FunctionCode::GEOMETRYFN_GET_PROPERTY_CODE,
            SymbolType::Geometry,
            DataType::String,
            FunctionCompilationType::Geometry,
            1,
        },
        {
            _T("load"),
            _T("geometry_name.load(filename)"),
            _T("Geometry_load_function.html"),
            FunctionCode::GEOMETRYFN_LOAD_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            1,
        },
        {
            _T("maxLatitude"),
            _T("geometry_name.maxLatitude()"),
            _T("Geometry_maxLatitude_function.html"),
            FunctionCode::GEOMETRYFN_MAX_LATITUDE_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("maxLongitude"),
            _T("geometry_name.maxLongitude()"),
            _T("Geometry_maxLongitude_function.html"),
            FunctionCode::GEOMETRYFN_MAX_LONGITUDE_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("minLatitude"),
            _T("geometry_name.minLatitude()"),
            _T("Geometry_minLatitude_function.html"),
            FunctionCode::GEOMETRYFN_MIN_LATITUDE_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("minLongitude"),
            _T("geometry_name.minLongitude()"),
            _T("Geometry_minLongitude_function.html"),
            FunctionCode::GEOMETRYFN_MIN_LONGITUDE_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("perimeter"),
            _T("geometry_name.perimeter()"),
            _T("Geometry_perimeter_function.html"),
            FunctionCode::GEOMETRYFN_PERIMETER_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            0,
        },
        {
            _T("save"),
            _T("geometry_name.save(filename)"),
            _T("Geometry_save_function.html"),
            FunctionCode::GEOMETRYFN_SAVE_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            1,
        },
        {
            _T("setProperty"),
            _T("geometry_name.setProperty(name, value)"),
            _T("Geometry_setProperty_function.html"),
            FunctionCode::GEOMETRYFN_SET_PROPERTY_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            3,
        },
        {
            _T("tracePolygon"),
            _T("geometry_name.tracePolygon([map])"),
            _T("Geometry_tracePolygon_function.html"),
            FunctionCode::GEOMETRYFN_TRACE_POLYGON_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            1,
        },
        {
            _T("walkPolygon"),
            _T("geometry_name.walkPolygon([map])"),
            _T("Geometry_walkPolygon_function.html"),
            FunctionCode::GEOMETRYFN_WALK_POLYGON_CODE,
            SymbolType::Geometry,
            DataType::Numeric,
            FunctionCompilationType::Geometry,
            1,
        },


        // --------------------------------------------------------------------------
        // HashMap functions
        // --------------------------------------------------------------------------
        {
            _T("clear"),
            _T("hashmap_name.clear()"),
            _T("HashMap_clear_function.html"),
            FunctionCode::HASHMAPFN_CLEAR_CODE,
            SymbolType::HashMap,
            DataType::Numeric,
            FunctionCompilationType::HashMap,
            0,
        },
        {
            _T("contains"),
            _T("hashmap_name.contains(key_expression[, key_expression, ...])"),
            _T("HashMap_contains_function.html"),
            FunctionCode::HASHMAPFN_CONTAINS_CODE,
            SymbolType::HashMap,
            DataType::Numeric,
            FunctionCompilationType::HashMap,
            0,
        },
        {
            _T("getKeys"),
            _T("hashmap_name.getKeys(list, [key_expression, ...])"),
            _T("HashMap_getKeys_function.html"),
            FunctionCode::HASHMAPFN_GETKEYS_CODE,
            SymbolType::HashMap,
            DataType::Numeric,
            FunctionCompilationType::HashMap,
            0,
        },
        {
            _T("length"),
            _T("hashmap_name.length([key_expression, ...])"),
            _T("HashMap_length_function.html"),
            FunctionCode::HASHMAPFN_LENGTH_CODE,
            SymbolType::HashMap,
            DataType::Numeric,
            FunctionCompilationType::HashMap,
            0,
        },
        {
            _T("remove"),
            _T("hashmap_name.remove(key_expression[, key_expression, ...])"),
            _T("HashMap_remove_function.html"),
            FunctionCode::HASHMAPFN_REMOVE_CODE,
            SymbolType::HashMap,
            DataType::Numeric,
            FunctionCompilationType::HashMap,
            0,
        },


        // --------------------------------------------------------------------------
        // Image functions
        // --------------------------------------------------------------------------
        {
            _T("captureSignature"),
            _T("image_name.captureSignature([message])"),
            _T("Image_captureSignature_function.html"),
            FunctionCode::IMAGEFN_CAPTURESIGNATURE_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            2,
        },
        {
            _T("clear"),
            _T("image_name.clear()"),
            _T("Image_clear_function.html"),
            FunctionCode::IMAGEFN_CLEAR_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            0,
        },
        {
            _T("createQRCode"),
            _T("image_name.createQRCode(text | number[, options])"),
            _T("Image_createQRCode_function.html"),
            FunctionCode::BARCODEFN_CREATEQRCODE_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Barcode,
            0,
        },
        {
            _T("height"),
            _T("image_name.height()"),
            _T("Image_height_function.html"),
            FunctionCode::IMAGEFN_HEIGHT_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            0,
        },
        {
            _T("load"),
            _T("image_name.load(filename)"),
            _T("Image_load_function.html"),
            FunctionCode::IMAGEFN_LOAD_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            2,
        },
        {
            _T("resample"),
            _T("image_name.resample(width, height)"),
            _T("Image_resample_function.html"),
            FunctionCode::IMAGEFN_RESAMPLE_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            4,
        },
        {
            _T("save"),
            _T("image_name.save(filename)"),
            _T("Image_save_function.html"),
            FunctionCode::IMAGEFN_SAVE_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            2,
        },
        {
            _T("takePhoto"),
            _T("image_name.takePhoto([message])"),
            _T("Image_takePhoto_function.html"),
            FunctionCode::IMAGEFN_TAKEPHOTO_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            2,
        },
        {
            _T("view"),
            _T("image_name.view()"),
            _T("Image_view_function.html"),
            FunctionCode::IMAGEFN_VIEW_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            1,
        },
        {
            _T("width"),
            _T("image_name.width()"),
            _T("Image_width_function.html"),
            FunctionCode::IMAGEFN_WIDTH_CODE,
            SymbolType::Image,
            DataType::Numeric,
            FunctionCompilationType::Image,
            0,
        },


        // --------------------------------------------------------------------------
        // List functions
        // --------------------------------------------------------------------------
        {
            _T("add"),
            _T("list_name.add(item | list)"),
            _T("List_add_function.html"),
            FunctionCode::LISTFN_ADD_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            2,
        },
        {
            _T("clear"),
            _T("list_name.clear()"),
            _T("List_clear_function.html"),
            FunctionCode::LISTFN_CLEAR_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            0,
        },
        {
            _T("insert"),
            _T("list_name.insert(index, item | list)"),
            _T("List_insert_function.html"),
            FunctionCode::LISTFN_INSERT_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            3,
        },
        {
            _T("length"),
            _T("list_name.length()"),
            _T("List_length_function.html"),
            FunctionCode::LISTFN_LENGTH_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            0,
        },
        {
            _T("remove"),
            _T("list_name.remove(index)"),
            _T("List_remove_function.html"),
            FunctionCode::LISTFN_REMOVE_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            1,
        },
        {
            _T("removeDuplicates"),
            _T("list_name.removeDuplicates()"),
            _T("List_removeDuplicates_function.html"),
            FunctionCode::LISTFN_REMOVEDUPLICATES_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            0,
        },
        {
            _T("removeIn"),
            _T("list_name.removeIn(In_List)"),
            _T("List_removeIn_function.html"),
            FunctionCode::LISTFN_REMOVEIN_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            1,
        },
        {
            _T("seek"),
            _T("list_name.seek(value)"),
            _T("List_seek_function.html"),
            FunctionCode::LISTFN_SEEK_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            3,
        },
        {
            _T("show"),
            _T("list_name.show([title])"),
            _T("List_show_function.html"),
            FunctionCode::LISTFN_SHOW_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            1,
        },
        {
            _T("sort"),
            _T("list_name.sort([ascending | descending])"),
            _T("List_sort_function.html"),
            FunctionCode::LISTFN_SORT_CODE,
            SymbolType::List,
            DataType::Numeric,
            FunctionCompilationType::List,
            1,
        },


        // --------------------------------------------------------------------------
        // Map functions
        // --------------------------------------------------------------------------
        {
            _T("addGeometry"),
            _T("map_name.addGeometry(geometry)"),
            _T("Map_addGeometry_function.html"),
            FunctionCode::MAPFN_ADD_GEOMETRY_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("addImageButton"),
            _T("map_name.addImageButton(pathToImageFile, onClickFunction)"),
            _T("Map_addImageButton_function.html"),
            FunctionCode::MAPFN_ADD_IMAGE_BUTTON_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("addMarker"),
            _T("map_name.addMarker(latitude, longitude)"),
            _T("Map_addMarker_function.html"),
            FunctionCode::MAPFN_ADD_MARKER_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("addTextButton"),
            _T("map_name.addTextButton(label, onClickFunction)"),
            _T("Map_addText_button_function.html"),
            FunctionCode::MAPFN_ADD_TEXT_BUTTON_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("clear"),
            _T("map_name.clear()"),
            _T("Map_clear_function.html"),
            FunctionCode::MAPFN_CLEAR_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("clearButtons"),
            _T("map_name.clearButtons()"),
            _T("Map_clearButtons_function.html"),
            FunctionCode::MAPFN_CLEAR_BUTTONS_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("clearGeometry"),
            _T("map_name.clearGeometry()"),
            _T("Map_clearGeometry_function.html"),
            FunctionCode::MAPFN_CLEAR_GEOMETRY_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("clearMarkers"),
            _T("map_name.clearMarkers()"),
            _T("Map_clearMarkers_function.html"),
            FunctionCode::MAPFN_CLEAR_MARKERS_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("getLastClickLatitude"),
            _T("map_name.getLastClickLatitude()"),
            _T("Map_getLastClickLatitude_function.html"),
            FunctionCode::MAPFN_GET_LAST_CLICK_LATITUDE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("getLastClickLongitude"),
            _T("map_name.getLastClickLongitude()"),
            _T("Map_getLastClickLongitude_function.html"),
            FunctionCode::MAPFN_GET_LAST_CLICK_LONGITUDE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("getMarkerLatitude"),
            _T("map_name.getMarkerLatitude(markerId)"),
            _T("Map_getMarkerLatitude_function.html"),
            FunctionCode::MAPFN_GET_MARKER_LATITUDE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("getMarkerLongitude"),
            _T("map_name.getMarkerLongitude(markerId)"),
            _T("Map_getMarkerLongitude_function.html"),
            FunctionCode::MAPFN_GET_MARKER_LONGITUDE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("hide"),
            _T("map_name.hide()"),
            _T("Map_hide_function.html"),
            FunctionCode::MAPFN_HIDE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("removeButton"),
            _T("map_name.removeButton(buttonId)"),
            _T("Map_removeButton_function.html"),
            FunctionCode::MAPFN_REMOVE_BUTTON_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("removeGeometry"),
            _T("map_name.removeGeometry(geometryId)"),
            _T("Map_removeGeometry_function.html"),
            FunctionCode::MAPFN_REMOVE_GEOMETRY_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("removeMarker"),
            _T("map_name.removeMarker(markerId)"),
            _T("Map_removeMarker_function.html"),
            FunctionCode::MAPFN_REMOVE_MARKER_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("saveSnapshot"),
            _T("map_name.saveSnapshot(filename)"),
            _T("Map_saveSnapshot_function.html"),
            FunctionCode::MAPFN_SAVESNAPSHOT_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("setBaseMap"),
            _T("map_name.setBaseMap(Normal|Hybrid|Satellite|Terrain|None|pathToFile)"),
            _T("Map_setBaseMap_function.html"),
            FunctionCode::MAPFN_SET_BASE_MAP_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("setMarkerDescription"),
            _T("map_name.setMarkerDescription(markerId, description)"),
            _T("Map_setMarkerDescription_function.html"),
            FunctionCode::MAPFN_SET_MARKER_DESCRIPTION_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("setMarkerImage"),
            _T("map_name.setMarkerImage(markerId, pathOfImageFile)"),
            _T("Map_setMarkerImage_function.html"),
            FunctionCode::MAPFN_SET_MARKER_IMAGE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("setMarkerLocation"),
            _T("map_name.setMarkerLocation(markerId, latitude, longitude)"),
            _T("Map_setMarkerLocation_function.html"),
            FunctionCode::MAPFN_SET_MARKER_LOCATION_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            3,
        },
        {
            _T("setMarkerOnClick"),
            _T("map_name.setMarkerOnClick(markerId, onClickFunction)"),
            _T("Map_setMarkerOnClick_function.html"),
            FunctionCode::MAPFN_SET_MARKER_ON_CLICK_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("setMarkerOnClickInfoWindow"),
            _T("map_name.setMarkerOnClickInfoWindow(markerId, onClickFunction)"),
            _T("Map_setMarkerOnClickInfoWindow_function.html"),
            FunctionCode::MAPFN_SET_MARKER_ON_CLICK_INFO_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("setMarkerOnDrag"),
            _T("map_name.setMarkerOnDrag(markerId, onDragFunction)"),
            _T("Map_setMarkerOnDrag_function.html"),
            FunctionCode::MAPFN_SET_MARKER_ON_DRAG_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            2,
        },
        {
            _T("setMarkerText"),
            _T("map_name.setMarkerText(markerId, text, [backgroundColor], [textColor])"),
            _T("Map_setMarkerText_function.html"),
            FunctionCode::MAPFN_SET_MARKER_TEXT_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            4,
        },
        {
            _T("setOnClick"),
            _T("map_name.setOnClick(function)"),
            _T("Map_setOnClick_function.html"),
            FunctionCode::MAPFN_SET_ON_CLICK_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("setTitle"),
            _T("map_name.setTitle(title)"),
            _T("Map_setTitle_function.html"),
            FunctionCode::MAPFN_SET_TITLE_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("show"),
            _T("map_name.show()"),
            _T("Map_show_function.html"),
            FunctionCode::MAPFN_SHOW_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            0,
        },
        {
            _T("showCurrentLocation"),
            _T("map_name.showCurrentLocation(show_code)"),
            _T("Map_showCurrentLocation_function.html"),
            FunctionCode::MAPFN_SHOW_CURRENT_LOCATION_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            1,
        },
        {
            _T("zoomTo"),
            _T("map_name.zoomTo(latitude | minLat, longitude | minLon[, maxLat, maxLon])"),
            _T("Map_zoomTo_function.html"),
            FunctionCode::MAPFN_ZOOM_TO_CODE,
            SymbolType::Map,
            DataType::Numeric,
            FunctionCompilationType::Map,
            5,
        },


        // --------------------------------------------------------------------------
        // named frequency functions (Freq)
        // --------------------------------------------------------------------------
        {
            _T("clear"),
            _T("freq_name.clear()"),
            _T("Freq_clear_function.html"),
            FunctionCode::FREQFN_CLEAR_CODE,
            SymbolType::NamedFrequency,
            DataType::Numeric,
            FunctionCompilationType::NamedFrequency,
            0,
        },
        {
            _T("save"),
            _T("freq_name.save([filename | report_name])"),
            _T("Freq_save_function.html"),
            FunctionCode::FREQFN_SAVE_CODE,
            SymbolType::NamedFrequency,
            DataType::Numeric,
            FunctionCompilationType::NamedFrequency,
            3,
        },
        {
            _T("tally"),
            _T("freq_name.tally([weight])"),
            _T("Freq_tally_function.html"),
            FunctionCode::FREQFN_TALLY_CODE,
            SymbolType::NamedFrequency,
            DataType::Numeric,
            FunctionCompilationType::NamedFrequency,
            1,
        },
        {
            _T("view"),
            _T("freq_name.view()"),
            _T("Freq_view_function.html"),
            FunctionCode::FREQFN_VIEW_CODE,
            SymbolType::NamedFrequency,
            DataType::Numeric,
            FunctionCompilationType::NamedFrequency,
            2,
        },


        // --------------------------------------------------------------------------
        // Path functions
        // --------------------------------------------------------------------------
        {
            _T("concat"),
            _T("Path.concat(path1[, path2, ...])"),
            _T("Path_concat_function.html"),
            FunctionCode::PATHFN_CONCAT_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },
        {
            _T("getDirectoryName"),
            _T("Path.getDirectoryName(path)"),
            _T("Path_getDirectoryName_function.html"),
            FunctionCode::PATHFN_GETDIRECTORYNAME_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },
        {
            _T("getExtension"),
            _T("Path.getExtension(path)"),
            _T("Path_getExtension_function.html"),
            FunctionCode::PATHFN_GETEXTENSION_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },
        {
            _T("getFileName"),
            _T("Path.getFileName(path)"),
            _T("Path_getFileName_function.html"),
            FunctionCode::PATHFN_GETFILENAME_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },
        {
            _T("getFileNameWithoutExtension"),
            _T("Path.getFileNameWithoutExtension(path)"),
            _T("Path_getFileNameWithoutExtension_function.html"),
            FunctionCode::PATHFN_GETFILENAMEWITHOUTEXTENSION_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },
        {
            _T("getRelativePath"),
            _T("Path.getRelativePath(relative_to, path)"),
            _T("Path_getRelativePath_function.html"),
            FunctionCode::PATHFN_GETRELATIVEPATH_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },
        {
            _T("selectFile"),
            _T("Path.selectFile([title, options])"),
            _T("Path_selectFile_function.html"),
            FunctionCode::PATHFN_SELECTFILE_CODE,
            FunctionNamespace::Path,
            DataType::String,
            FunctionCompilationType::Path,
            0,
        },


        // --------------------------------------------------------------------------
        // Pff functions
        // --------------------------------------------------------------------------
        {
            _T("exec"),
            _T("pff_name.exec()"),
            _T("Pff_exec_function.html"),
            FunctionCode::PFFFN_EXEC_CODE,
            SymbolType::Pff,
            DataType::Numeric,
            FunctionCompilationType::Pff,
            0,
        },
        {
            _T("getProperty"),
            _T("pff_name.getProperty(property_name)"),
            _T("Pff_getProperty_function.html"),
            FunctionCode::PFFFN_GETPROPERTY_CODE,
            SymbolType::Pff,
            DataType::String,
            FunctionCompilationType::Pff,
            2,
        },
        {
            _T("load"),
            _T("pff_name.load(filename | form_file_name)"),
            _T("Pff_load_function.html"),
            FunctionCode::PFFFN_LOAD_CODE,
            SymbolType::Pff,
            DataType::Numeric,
            FunctionCompilationType::Pff,
            1,
        },
        {
            _T("save"),
            _T("pff_name.save(filename)"),
            _T("Pff_save_function.html"),
            FunctionCode::PFFFN_SAVE_CODE,
            SymbolType::Pff,
            DataType::Numeric,
            FunctionCompilationType::Pff,
            1,
        },
        {
            _T("setProperty"),
            _T("pff_name.setProperty(property_name, value)"),
            _T("Pff_setProperty_function.html"),
            FunctionCode::PFFFN_SETPROPERTY_CODE,
            SymbolType::Pff,
            DataType::Numeric,
            FunctionCompilationType::Pff,
            2,
        },


        // --------------------------------------------------------------------------
        // Report functions
        // --------------------------------------------------------------------------
        {
            _T("save"),
            _T("report_name.save(filename)"),
            _T("Report_save_function.html"),
            FunctionCode::REPORTFN_SAVE_CODE,
            SymbolType::Report,
            DataType::Numeric,
            FunctionCompilationType::Report,
            -1,
        },
        {
            _T("view"),
            _T("report_name.view()"),
            _T("Report_view_function.html"),
            FunctionCode::REPORTFN_VIEW_CODE,
            SymbolType::Report,
            DataType::Numeric,
            FunctionCompilationType::Report,
            -1,
        },
        {
            _T("write"),
            _T("report_name.write(Message, [Item, [Item ...]])"),
            _T("Report_write_function.html"),
            FunctionCode::REPORTFN_WRITE_CODE,
            SymbolType::Report,
            DataType::Numeric,
            FunctionCompilationType::Report,
            -1,
        },


        // --------------------------------------------------------------------------
        // SystemApp functions
        // --------------------------------------------------------------------------
        {
            _T("clear"),
            _T("system_app_name.clear()"),
            _T("SystemApp_clear_function.html"),
            FunctionCode::SYSTEMAPPFN_CLEAR_CODE,
            SymbolType::SystemApp,
            DataType::Numeric,
            FunctionCompilationType::SystemApp,
            0,
        },
        {
            _T("exec"),
            _T("system_app_name.exec(package_name[, activity_name])"),
            _T("SystemApp_exec_function.html"),
            FunctionCode::SYSTEMAPPFN_EXEC_CODE,
            SymbolType::SystemApp,
            DataType::Numeric,
            FunctionCompilationType::SystemApp,
            2,
        },
        {
            _T("getResult"),
            _T("system_app_name.getResult(argument)"),
            _T("SystemApp_getResult_function.html"),
            FunctionCode::SYSTEMAPPFN_GETRESULT_CODE,
            SymbolType::SystemApp,
            DataType::String,
            FunctionCompilationType::SystemApp,
            1,
        },
        {
            _T("setArgument"),
            _T("system_app_name.setArgument(argument[, value])"),
            _T("SystemApp_setArgument_function.html"),
            FunctionCode::SYSTEMAPPFN_SETARGUMENT_CODE,
            SymbolType::SystemApp,
            DataType::Numeric,
            FunctionCompilationType::SystemApp,
            3,
        },


        // --------------------------------------------------------------------------
        // ValueSet functions
        // --------------------------------------------------------------------------
        {
            _T("add"),
            _T("valueset_name.add(label, from_code[, to_code | special_code])"),
            _T("ValueSet_add_function.html"),
            FunctionCode::VALUESETFN_ADD_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::ValueSet,
            6,
        },
        {
            _T("clear"),
            _T("valueset_name.clear()"),
            _T("ValueSet_clear_function.html"),
            FunctionCode::VALUESETFN_CLEAR_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::ValueSet,
            0,
        },
        {
            _T("length"),
            _T("valueset_name.length()"),
            _T("ValueSet_length_function.html"),
            FunctionCode::VALUESETFN_LENGTH_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::ValueSet,
            0,
        },
        {
            _T("remove"),
            _T("valueset_name.remove(code)"),
            _T("ValueSet_remove_function.html"),
            FunctionCode::VALUESETFN_REMOVE_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::ValueSet,
            1,
        },
        {
            _T("randomize"),
            _T("valueset_name.randomize([exclude(expression1, ...)])"),
            _T("ValueSet_randomize_function.html"),
            FunctionCode::FNRANDOMIZEVS_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::Various,
            0,
        },
        {
            _T("show"),
            _T("valueset_name.show([title])"),
            _T("ValueSet_show_function.html"),
            FunctionCode::VALUESETFN_SHOW_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::ValueSet,
            1,
        },
        {
            _T("sort"),
            _T("valueset_name.sort([ascending | descending] [by code | label])"),
            _T("ValueSet_sort_function.html"),
            FunctionCode::VALUESETFN_SORT_CODE,
            SymbolType::ValueSet,
            DataType::Numeric,
            FunctionCompilationType::ValueSet,
            2,
        },
    };
}



// --------------------------------------------------------------------------
// FunctionDomain
// --------------------------------------------------------------------------

bool operator==(const std::variant<SymbolType, FunctionNamespace>& symbol_type_or_function_namespace, const FunctionDomain& function_domain)
{
    if( std::holds_alternative<SymbolType>(symbol_type_or_function_namespace) )
    {
        if( std::holds_alternative<SymbolType>(function_domain) )
        {
            return ( std::get<SymbolType>(function_domain) == std::get<SymbolType>(symbol_type_or_function_namespace) );
        }

        else if( std::holds_alternative<AllSymbolsDomain>(function_domain) )
        {
            ASSERT(std::get<SymbolType>(symbol_type_or_function_namespace) != SymbolType::Unknown);
            return ( std::get<SymbolType>(symbol_type_or_function_namespace) != SymbolType::None );
        }

        else if( std::holds_alternative<std::vector<SymbolType>>(function_domain) )
        {
            const std::vector<SymbolType>& symbol_types = std::get<std::vector<SymbolType>>(function_domain);
            const auto& lookup = std::find(symbol_types.cbegin(), symbol_types.cend(), std::get<SymbolType>(symbol_type_or_function_namespace));
            return ( lookup != symbol_types.cend() );
        }

        else
        {
            return false;
        }
    }

    else
    {
        return ( std::holds_alternative<FunctionNamespace>(function_domain) &&
                 std::get<FunctionNamespace>(symbol_type_or_function_namespace) == std::get<FunctionNamespace>(function_domain) );
    }
}



// --------------------------------------------------------------------------
// FunctionTable
// --------------------------------------------------------------------------

const MultipleReservedWordsTable<FunctionNamespaceDetails>& FunctionTable::GetFunctionNamespaces()
{
    static MultipleReservedWordsTable<FunctionNamespaceDetails> function_namespace_table(cs::span<const FunctionNamespaceDetails>(FunctionNamespaces,
                                                                                                                                  FunctionNamespaces + _countof(FunctionNamespaces)));
    return function_namespace_table;
}


bool FunctionTable::IsFunctionNamespace(wstring_view text_sv, const std::variant<SymbolType, FunctionNamespace>& symbol_type_or_function_namespace,
                                        const FunctionNamespaceDetails** function_namespace_details/* = nullptr*/)
{
    if( std::holds_alternative<FunctionNamespace>(symbol_type_or_function_namespace) )
    {
        return GetFunctionNamespaces().IsEntry(text_sv, &FunctionNamespaceDetails::parent_function_namespace,
                                               std::get<FunctionNamespace>(symbol_type_or_function_namespace), function_namespace_details);
    }

    else if( std::get<SymbolType>(symbol_type_or_function_namespace) == SymbolType::None )
    {
        return GetFunctionNamespaces().IsEntry(text_sv, &FunctionNamespaceDetails::parent_function_namespace,
                                               std::nullopt, function_namespace_details);
    }

    else
    {
        return false;
    }
}


const std::vector<const FunctionDetails*>& FunctionTable::GetFunctions()
{
    static const std::vector<const FunctionDetails*> all_functions =
        []()
        {
            // add the functions defined here
            std::vector<const FunctionDetails*> functions(_countof(Functions));
            auto functions_itr = functions.begin();

            for( const FunctionDetails& function_details : Functions )
            {
                *functions_itr = &function_details;
                ++functions_itr;
            }

            // add the CS functions
            const std::vector<const FunctionDetails*>& cs_functions = ActionInvoker::GetFunctions();
            functions.insert(functions.end(), cs_functions.cbegin(), cs_functions.cend());

            return functions;
        }();

    return all_functions;
}


const MultipleReservedWordsTable<FunctionDetails>& FunctionTable::GetFunctionsTable()
{
    static const MultipleReservedWordsTable<FunctionDetails> functions_table =
        []()
        {
            // creation of the span is done in a lambda to avoid a "static functions with block scope are illegal" error
            cs::span<const FunctionDetails* const> functions_span(GetFunctions());
            return MultipleReservedWordsTable<FunctionDetails>(functions_span);
        }();

    return functions_table;
}


bool FunctionTable::IsFunction(const wstring_view text_sv, const std::variant<SymbolType, FunctionNamespace>& symbol_type_or_function_namespace,
                               const FunctionDetails** function_details/* = nullptr*/)
{
    return GetFunctionsTable().IsEntry(text_sv, &FunctionDetails::function_domain, symbol_type_or_function_namespace, function_details);
}


bool FunctionTable::IsFunctionExtended(const wstring_view text_sv, const FunctionDomain& function_domain,
                                       const FunctionDetails** function_details/* = nullptr*/)
{
    ASSERT(!std::holds_alternative<std::vector<SymbolType>>(function_domain));

    if( GetFunctionsTable().IsEntry(text_sv, &FunctionDetails::function_domain, function_domain, function_details) )
        return true;

    for( const FunctionDetails& this_function_details : VI_V(GetFunctions()) )
    {
        if( SO::Equals(text_sv, this_function_details.name) )
        {
            bool matches = false;

            if( std::holds_alternative<AllSymbolsDomain>(function_domain) )
            {
                // AllSymbolsDomain will return true when the function applies to SOME symbols
                if( std::holds_alternative<std::vector<SymbolType>>(this_function_details.function_domain) )
                    matches = true;
            }

            else if( std::holds_alternative<SymbolType>(function_domain) )
            {
                if( std::holds_alternative<AllSymbolsDomain>(this_function_details.function_domain) )
                {
                    matches = true;
                }

                else if( std::holds_alternative<std::vector<SymbolType>>(this_function_details.function_domain) )
                {
                    const std::vector<SymbolType>& symbols = std::get<std::vector<SymbolType>>(this_function_details.function_domain);

                    if( std::find(symbols.cbegin(), symbols.cend(), std::get<SymbolType>(function_domain)) != symbols.cend() )
                        matches = true;
                }
            }

            if( matches )
            {
                if( function_details != nullptr )
                    *function_details = &this_function_details;

                return true;
            }
        }
    }

     return false;
}


bool FunctionTable::IsFunction(const wstring_view text_sv, const Symbol& symbol, const FunctionDetails** function_details/* = nullptr*/)
{
    const MultipleReservedWordsTable<FunctionDetails>& functions_table = GetFunctionsTable();

    // check the symbol's type...
    if( functions_table.IsEntry(text_sv, &FunctionDetails::function_domain, symbol.GetType(), function_details) )
        return true;

    // ...and wrapped type
    const SymbolType wrapped_type = symbol.GetWrappedType();

    return ( wrapped_type != SymbolType::None &&
             functions_table.IsEntry(text_sv, &FunctionDetails::function_domain, wrapped_type, function_details) );
}


const FunctionDetails* FunctionTable::GetFunctionDetails(const FunctionCode function_code)
{
    for( const FunctionDetails& function_details : VI_V(GetFunctions()) )
    {
        if( function_details.code == function_code )
            return &function_details;
    }

    return nullptr;
}


const TCHAR* FunctionTable::GetFunctionName(const FunctionCode function_code)
{
    const FunctionDetails* function_details = GetFunctionDetails(function_code);
    ASSERT(function_details != nullptr);
    return function_details->name;
}


const TCHAR* FunctionTable::GetFunctionNamespaceName(const FunctionNamespace function_namespace)
{
    for( const FunctionNamespaceDetails& function_namespace_details : FunctionNamespaces )
    {
        if( function_namespace_details.function_namespace == function_namespace )
            return function_namespace_details.name;
    }

    return ReturnProgrammingError(_T(""));
}
